"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_graphClient_ts";
exports.ids = ["_rsc_src_lib_graphClient_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/graphClient.ts":
/*!********************************!*\
  !*** ./src/lib/graphClient.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KaiSignGraphClient: () => (/* binding */ KaiSignGraphClient),\n/* harmony export */   createKaiSignClient: () => (/* binding */ createKaiSignClient),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-request */ \"(rsc)/../node_modules/graphql-request/build/entrypoints/main.js\");\n\nclass KaiSignGraphClient {\n    constructor(graphqlEndpoint){\n        this.client = new graphql_request__WEBPACK_IMPORTED_MODULE_0__.GraphQLClient(graphqlEndpoint);\n    }\n    /**\n   * Get contracts with approved metadata for a specific chain\n   * Always returns latest metadata (handles disputes automatically)\n   */ async getContractsWithMetadata(chainID) {\n        const query = `\n      query GetContracts($chainID: String!) {\n        contracts(where: { chainID: $chainID, hasApprovedMetadata: true }) {\n          address\n          chainID\n          name\n          version\n          description\n          hasApprovedMetadata\n          latestSpecTimestamp\n          functionCount\n        }\n      }\n    `;\n        const data = await this.client.request(query, {\n            chainID\n        });\n        return data.contracts;\n    }\n    /**\n   * Get transaction metadata for a specific contract and selector\n   * Always uses latest approved metadata\n   */ async getTransactionMetadata(contractAddress, selector, chainID) {\n        // Query for specs that target this contract\n        const query = `\n      query GetContractSpecs($targetContract: Bytes!, $chainID: String!) {\n        specs(where: { \n          targetContract: $targetContract\n          chainID: $chainID\n        }) {\n          id\n          ipfs\n          user\n          status\n          blockTimestamp\n        }\n      }\n    `;\n        const targetContract = contractAddress.toLowerCase();\n        const data = await this.client.request(query, {\n            targetContract,\n            chainID\n        });\n        // If we have specs, return a placeholder indicating metadata is available\n        if (data.specs && data.specs.length > 0) {\n            return {\n                selector: selector,\n                name: `Contract Function ${selector}`,\n                intent: `Execute function ${selector} on contract`,\n                parameterTypes: [],\n                displayFormat: `function_${selector.slice(2, 10)}`\n            };\n        }\n        return null;\n    }\n    /**\n   * Get complete contract metadata with IPFS data\n   */ async getCompleteContractMetadata(contractAddress, chainID) {\n        const query = `\n      query GetContractSpecs($targetContract: Bytes!, $chainID: String!) {\n        specs(where: { \n          targetContract: $targetContract\n          chainID: $chainID\n        }\n        orderBy: blockTimestamp\n        orderDirection: desc) {\n          id\n          ipfs\n          user\n          status\n          blockTimestamp\n          targetContract\n          chainID\n        }\n      }\n    `;\n        const targetContract = contractAddress.toLowerCase();\n        const data = await this.client.request(query, {\n            targetContract,\n            chainID\n        });\n        let ipfsMetadata;\n        // Try to fetch IPFS metadata from the most recent spec\n        if (data.specs && data.specs.length > 0) {\n            const latestSpec = data.specs[0];\n            if (latestSpec) {\n                try {\n                    // Always fetch from IPFS gateways for real data\n                    const gateways = [\n                        `https://gateway.pinata.cloud/ipfs/${latestSpec.ipfs}`,\n                        `https://ipfs.io/ipfs/${latestSpec.ipfs}`,\n                        `https://dweb.link/ipfs/${latestSpec.ipfs}`,\n                        `https://cloudflare-ipfs.com/ipfs/${latestSpec.ipfs}`\n                    ];\n                    console.log(`Fetching real IPFS data for hash: ${latestSpec.ipfs}`);\n                    for (const gateway of gateways){\n                        try {\n                            console.log(`Trying IPFS gateway: ${gateway}`);\n                            const ipfsResponse = await fetch(gateway, {\n                                signal: AbortSignal.timeout(15000) // 15 second timeout per gateway\n                            });\n                            if (ipfsResponse.ok) {\n                                ipfsMetadata = await ipfsResponse.json();\n                                console.log(`Successfully fetched real metadata from: ${gateway}`);\n                                break; // Success, exit the loop\n                            }\n                        } catch (error) {\n                            console.log(`Gateway ${gateway} failed:`, error);\n                            continue; // Try next gateway\n                        }\n                    }\n                    if (!ipfsMetadata) {\n                        throw new Error(`Failed to fetch IPFS metadata for hash: ${latestSpec.ipfs}. All IPFS gateways failed.`);\n                    }\n                } catch (error) {\n                    console.log('Failed to fetch IPFS metadata:', error);\n                }\n            }\n        }\n        return {\n            specs: data.specs,\n            ipfsMetadata\n        };\n    }\n    /**\n   * Get dispute/replacement history for a contract\n   * Shows all finalized specs ordered by newest first\n   */ async getContractSpecHistory(contractAddress, chainID) {\n        const query = `\n      query GetSpecHistory($targetContract: Bytes!, $chainID: String!) {\n        specs(\n          where: { \n            targetContract: $targetContract\n            chainID: $chainID\n            status: FINALIZED\n          }\n          orderBy: blockTimestamp\n          orderDirection: desc\n        ) {\n          id\n          user\n          ipfs\n          blockTimestamp\n          status\n        }\n      }\n    `;\n        const data = await this.client.request(query, {\n            targetContract: contractAddress.toLowerCase(),\n            chainID\n        });\n        return data.specs.map((spec)=>({\n                id: spec.id,\n                creator: spec.user,\n                ipfsCID: spec.ipfs,\n                createdTimestamp: spec.blockTimestamp,\n                status: spec.status\n            }));\n    }\n    /**\n   * Get all functions for a specific contract\n   */ async getContractFunctions(contractAddress, chainID) {\n        const query = `\n      query GetContractFunctions($contractId: String!) {\n        functions(where: { contract: $contractId }) {\n          selector\n          name\n          intent\n          parameterTypes\n          displayFormat\n        }\n      }\n    `;\n        const contractId = `${contractAddress.toLowerCase()}-${chainID}`;\n        const data = await this.client.request(query, {\n            contractId\n        });\n        return data.functions;\n    }\n    /**\n   * Search contracts by name\n   */ async searchContracts(searchTerm, chainID) {\n        const whereClause = chainID ? `{ hasApprovedMetadata: true, chainID: \"${chainID}\", name_contains_nocase: \"${searchTerm}\" }` : `{ hasApprovedMetadata: true, name_contains_nocase: \"${searchTerm}\" }`;\n        const query = `\n      query SearchContracts {\n        contracts(where: ${whereClause}) {\n          address\n          chainID\n          name\n          version\n          description\n          hasApprovedMetadata\n          latestSpecTimestamp\n          functionCount\n        }\n      }\n    `;\n        const data = await this.client.request(query);\n        return data.contracts;\n    }\n    /**\n   * Get all finalized specifications created by a specific user\n   */ async getUserFinalizedSpecs(userAddress) {\n        const query = `\n      query GetUserFinalizedSpecs($user: Bytes!) {\n        specs(\n          where: { \n            user: $user\n            status: FINALIZED\n          }\n          orderBy: blockTimestamp\n          orderDirection: desc\n        ) {\n          id\n          user\n          ipfs\n          targetContract\n          blockTimestamp\n          status\n        }\n      }\n    `;\n        const data = await this.client.request(query, {\n            user: userAddress.toLowerCase()\n        });\n        if (!data || !data.specs) {\n            return [];\n        }\n        return data.specs.map((spec)=>({\n                id: spec.id,\n                creator: spec.user,\n                ipfsCID: spec.ipfs,\n                createdTimestamp: spec.blockTimestamp,\n                status: spec.status,\n                targetContract: spec.targetContract,\n                totalBonds: \"0\",\n                bondsSettled: false,\n                proposedTimestamp: spec.blockTimestamp // Use blockTimestamp as fallback\n            }));\n    }\n    /**\n   * Get all specifications (any status) created by a specific user\n   */ async getUserSpecs(userAddress) {\n        const query = `\n      query GetUserSpecs($user: Bytes!) {\n        specs(\n          where: { \n            user: $user\n          }\n          orderBy: blockTimestamp\n          orderDirection: desc\n        ) {\n          id\n          user\n          ipfs\n          targetContract\n          blockTimestamp\n          status\n        }\n      }\n    `;\n        const data = await this.client.request(query, {\n            user: userAddress.toLowerCase()\n        });\n        if (!data || !data.specs) {\n            return [];\n        }\n        return data.specs.map((spec)=>({\n                id: spec.id,\n                creator: spec.user,\n                ipfsCID: spec.ipfs,\n                createdTimestamp: spec.blockTimestamp,\n                status: spec.status,\n                targetContract: spec.targetContract,\n                totalBonds: \"0\",\n                bondsSettled: false,\n                proposedTimestamp: spec.blockTimestamp // Use blockTimestamp as fallback\n            }));\n    }\n}\n// Default client instance for common networks\nconst createKaiSignClient = (network)=>{\n    const endpoints = {\n        mainnet: 'https://api.thegraph.com/subgraphs/name/kai-sign/kaisign-mainnet',\n        sepolia: 'https://api.studio.thegraph.com/query/117022/kaisign-subgraph/v0.0.3'\n    };\n    const endpoint = endpoints[network] || network;\n    return new KaiSignGraphClient(endpoint);\n};\n// Re-export for convenience\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (KaiSignGraphClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/graphClient.ts\n");

/***/ })

};
;