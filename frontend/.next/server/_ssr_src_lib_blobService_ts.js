"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_blobService_ts";
exports.ids = ["_ssr_src_lib_blobService_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/blobService.ts":
/*!********************************!*\
  !*** ./src/lib/blobService.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postToBlob: () => (/* binding */ postToBlob),\n/* harmony export */   postToBlobWithValidation: () => (/* binding */ postToBlobWithValidation),\n/* harmony export */   validateBlobHash: () => (/* binding */ validateBlobHash),\n/* harmony export */   validateMultipleBlobHashes: () => (/* binding */ validateMultipleBlobHashes)\n/* harmony export */ });\n/* harmony import */ var _blobValidationService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blobValidationService */ \"(ssr)/./src/lib/blobValidationService.ts\");\n\nasync function postToBlob(json) {\n    const body = typeof json === 'string' ? {\n        json\n    } : {\n        json\n    };\n    const res = await fetch('/api/blob/submit', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    });\n    if (!res.ok) {\n        const text = await res.text().catch(()=>'');\n        throw new Error(text || `HTTP ${res.status}`);\n    }\n    const data = await res.json();\n    if (!data?.blobVersionedHash) {\n        throw new Error('Blob upload did not return versioned hash');\n    }\n    return data;\n}\n/**\n * Validates a blob hash before using it in transactions\n */ async function validateBlobHash(blobHash) {\n    return await _blobValidationService__WEBPACK_IMPORTED_MODULE_0__.blobValidationService.validateBlobHash(blobHash);\n}\n/**\n * Validates multiple blob hashes at once\n */ async function validateMultipleBlobHashes(blobHashes) {\n    return await _blobValidationService__WEBPACK_IMPORTED_MODULE_0__.blobValidationService.validateMultipleBlobHashes(blobHashes);\n}\n/**\n * Posts blob and validates the result\n */ async function postToBlobWithValidation(json) {\n    const result = await postToBlob(json);\n    // Validate the returned blob hash\n    const validation = await validateBlobHash(result.blobVersionedHash);\n    if (!validation.isValid || !validation.exists) {\n        throw new Error(`Blob posted but validation failed: ${validation.error || 'Unknown error'}`);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvbGliL2Jsb2JTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNGO0FBUy9FLGVBQWVDLFdBQVdDLElBQXFCO0lBQ3BELE1BQU1DLE9BQU8sT0FBT0QsU0FBUyxXQUFXO1FBQUVBO0lBQUssSUFBSTtRQUFFQTtJQUFLO0lBQzFELE1BQU1FLE1BQU0sTUFBTUMsTUFBTSxvQkFBb0I7UUFDMUNDLFFBQVE7UUFDUkMsU0FBUztZQUFFLGdCQUFnQjtRQUFtQjtRQUM5Q0osTUFBTUssS0FBS0MsU0FBUyxDQUFDTjtJQUN2QjtJQUNBLElBQUksQ0FBQ0MsSUFBSU0sRUFBRSxFQUFFO1FBQ1gsTUFBTUMsT0FBTyxNQUFNUCxJQUFJTyxJQUFJLEdBQUdDLEtBQUssQ0FBQyxJQUFNO1FBQzFDLE1BQU0sSUFBSUMsTUFBTUYsUUFBUSxDQUFDLEtBQUssRUFBRVAsSUFBSVUsTUFBTSxFQUFFO0lBQzlDO0lBQ0EsTUFBTUMsT0FBTyxNQUFNWCxJQUFJRixJQUFJO0lBQzNCLElBQUksQ0FBQ2EsTUFBTUMsbUJBQW1CO1FBQzVCLE1BQU0sSUFBSUgsTUFBTTtJQUNsQjtJQUNBLE9BQU9FO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNNLGVBQWVFLGlCQUFpQkMsUUFBZ0I7SUFDckQsT0FBTyxNQUFNbEIseUVBQXFCQSxDQUFDaUIsZ0JBQWdCLENBQUNDO0FBQ3REO0FBRUE7O0NBRUMsR0FDTSxlQUFlQywyQkFBMkJDLFVBQW9CO0lBQ25FLE9BQU8sTUFBTXBCLHlFQUFxQkEsQ0FBQ21CLDBCQUEwQixDQUFDQztBQUNoRTtBQUVBOztDQUVDLEdBQ00sZUFBZUMseUJBQXlCbkIsSUFBcUI7SUFDbEUsTUFBTW9CLFNBQVMsTUFBTXJCLFdBQVdDO0lBRWhDLGtDQUFrQztJQUNsQyxNQUFNcUIsYUFBYSxNQUFNTixpQkFBaUJLLE9BQU9OLGlCQUFpQjtJQUNsRSxJQUFJLENBQUNPLFdBQVdDLE9BQU8sSUFBSSxDQUFDRCxXQUFXRSxNQUFNLEVBQUU7UUFDN0MsTUFBTSxJQUFJWixNQUFNLENBQUMsbUNBQW1DLEVBQUVVLFdBQVdHLEtBQUssSUFBSSxpQkFBaUI7SUFDN0Y7SUFFQSxPQUFPSjtBQUNUIiwic291cmNlcyI6WyIvVXNlcnMvcmljaGFyZGhhL0RvY3VtZW50cy/ou5/pq5Tlt6XnqIsvUHJvamVjdHMvS2FpLVNpZ24tQnVpbGRlci9mcm9udGVuZC9zcmMvbGliL2Jsb2JTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJsb2JWYWxpZGF0aW9uU2VydmljZSwgQmxvYlZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICcuL2Jsb2JWYWxpZGF0aW9uU2VydmljZSc7XG5cbmV4cG9ydCB0eXBlIEJsb2JQb3N0UmVzdWx0ID0ge1xuICB0eEhhc2g6IHN0cmluZztcbiAgYmxvYlZlcnNpb25lZEhhc2g6IHN0cmluZztcbiAgZXRoZXJzY2FuQmxvYlVybDogc3RyaW5nO1xuICBibG9ja051bWJlcj86IG51bWJlciB8IG51bGw7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcG9zdFRvQmxvYihqc29uOiBvYmplY3QgfCBzdHJpbmcpOiBQcm9taXNlPEJsb2JQb3N0UmVzdWx0PiB7XG4gIGNvbnN0IGJvZHkgPSB0eXBlb2YganNvbiA9PT0gJ3N0cmluZycgPyB7IGpzb24gfSA6IHsganNvbiB9O1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnL2FwaS9ibG9iL3N1Ym1pdCcsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgfSk7XG4gIGlmICghcmVzLm9rKSB7XG4gICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCkuY2F0Y2goKCkgPT4gJycpO1xuICAgIHRocm93IG5ldyBFcnJvcih0ZXh0IHx8IGBIVFRQICR7cmVzLnN0YXR1c31gKTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgaWYgKCFkYXRhPy5ibG9iVmVyc2lvbmVkSGFzaCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmxvYiB1cGxvYWQgZGlkIG5vdCByZXR1cm4gdmVyc2lvbmVkIGhhc2gnKTtcbiAgfVxuICByZXR1cm4gZGF0YSBhcyBCbG9iUG9zdFJlc3VsdDtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgYSBibG9iIGhhc2ggYmVmb3JlIHVzaW5nIGl0IGluIHRyYW5zYWN0aW9uc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVCbG9iSGFzaChibG9iSGFzaDogc3RyaW5nKTogUHJvbWlzZTxCbG9iVmFsaWRhdGlvblJlc3VsdD4ge1xuICByZXR1cm4gYXdhaXQgYmxvYlZhbGlkYXRpb25TZXJ2aWNlLnZhbGlkYXRlQmxvYkhhc2goYmxvYkhhc2gpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyBtdWx0aXBsZSBibG9iIGhhc2hlcyBhdCBvbmNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZU11bHRpcGxlQmxvYkhhc2hlcyhibG9iSGFzaGVzOiBzdHJpbmdbXSk6IFByb21pc2U8TWFwPHN0cmluZywgQmxvYlZhbGlkYXRpb25SZXN1bHQ+PiB7XG4gIHJldHVybiBhd2FpdCBibG9iVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGVNdWx0aXBsZUJsb2JIYXNoZXMoYmxvYkhhc2hlcyk7XG59XG5cbi8qKlxuICogUG9zdHMgYmxvYiBhbmQgdmFsaWRhdGVzIHRoZSByZXN1bHRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvc3RUb0Jsb2JXaXRoVmFsaWRhdGlvbihqc29uOiBvYmplY3QgfCBzdHJpbmcpOiBQcm9taXNlPEJsb2JQb3N0UmVzdWx0PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBvc3RUb0Jsb2IoanNvbik7XG4gIFxuICAvLyBWYWxpZGF0ZSB0aGUgcmV0dXJuZWQgYmxvYiBoYXNoXG4gIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCB2YWxpZGF0ZUJsb2JIYXNoKHJlc3VsdC5ibG9iVmVyc2lvbmVkSGFzaCk7XG4gIGlmICghdmFsaWRhdGlvbi5pc1ZhbGlkIHx8ICF2YWxpZGF0aW9uLmV4aXN0cykge1xuICAgIHRocm93IG5ldyBFcnJvcihgQmxvYiBwb3N0ZWQgYnV0IHZhbGlkYXRpb24gZmFpbGVkOiAke3ZhbGlkYXRpb24uZXJyb3IgfHwgJ1Vua25vd24gZXJyb3InfWApO1xuICB9XG4gIFxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbiJdLCJuYW1lcyI6WyJibG9iVmFsaWRhdGlvblNlcnZpY2UiLCJwb3N0VG9CbG9iIiwianNvbiIsImJvZHkiLCJyZXMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJ0ZXh0IiwiY2F0Y2giLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJibG9iVmVyc2lvbmVkSGFzaCIsInZhbGlkYXRlQmxvYkhhc2giLCJibG9iSGFzaCIsInZhbGlkYXRlTXVsdGlwbGVCbG9iSGFzaGVzIiwiYmxvYkhhc2hlcyIsInBvc3RUb0Jsb2JXaXRoVmFsaWRhdGlvbiIsInJlc3VsdCIsInZhbGlkYXRpb24iLCJpc1ZhbGlkIiwiZXhpc3RzIiwiZXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/blobService.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/blobValidationService.ts":
/*!******************************************!*\
  !*** ./src/lib/blobValidationService.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobValidationService: () => (/* binding */ BlobValidationService),\n/* harmony export */   blobValidationService: () => (/* binding */ blobValidationService)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(ssr)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(ssr)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(ssr)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n\nclass BlobValidationService {\n    constructor(rpcUrl){\n        this.provider = null;\n        if (rpcUrl) {\n            this.provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(rpcUrl);\n        } else if (false) {}\n    }\n    /**\n   * Validates blob hash format and checks if it exists on-chain\n   */ async validateBlobHash(blobHash) {\n        try {\n            // Step 1: Basic format validation\n            const formatValidation = this.validateBlobHashFormat(blobHash);\n            if (!formatValidation.isValid) {\n                return formatValidation;\n            }\n            // Step 2: Check if blob exists on-chain\n            const existenceCheck = await this.checkBlobExists(blobHash);\n            if (!existenceCheck.exists) {\n                return {\n                    isValid: false,\n                    exists: false,\n                    error: `Blob hash ${blobHash} does not exist on-chain. This could be because:\n1. The blob was never posted to the blockchain\n2. The blob hash is incorrect\n3. The blob transaction failed or was reverted\n4. You're checking on the wrong network (should be Sepolia)`\n                };\n            }\n            return {\n                isValid: true,\n                exists: true,\n                blobData: existenceCheck.blobData\n            };\n        } catch (error) {\n            console.error('Blob validation error:', error);\n            return {\n                isValid: false,\n                exists: false,\n                error: `Validation failed: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    }\n    /**\n   * Validates the basic format of a blob hash\n   */ validateBlobHashFormat(blobHash) {\n        // Check if it's a string\n        if (typeof blobHash !== 'string') {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'Blob hash must be a string'\n            };\n        }\n        // Check if it starts with 0x01 (EIP-4844 blob version)\n        if (!blobHash.startsWith('0x01')) {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'Blob hash must start with 0x01 (EIP-4844 blob version)'\n            };\n        }\n        // Check if it's exactly 66 characters (0x + 64 hex chars)\n        if (blobHash.length !== 66) {\n            return {\n                isValid: false,\n                exists: false,\n                error: `Blob hash must be exactly 66 characters (got ${blobHash.length}). Expected format: 0x01 + 64 hex characters`\n            };\n        }\n        // Check if it contains only valid hex characters\n        const hexRegex = /^0x01[a-fA-F0-9]{64}$/;\n        if (!hexRegex.test(blobHash)) {\n            // Find the first invalid character for better error reporting\n            const afterPrefix = blobHash.substring(4); // Remove \"0x01\"\n            let invalidChar = '';\n            let invalidPos = -1;\n            for(let i = 0; i < afterPrefix.length; i++){\n                const char = afterPrefix[i];\n                if (!/[0-9a-fA-F]/.test(char)) {\n                    invalidChar = char;\n                    invalidPos = i + 4; // +4 to account for \"0x01\" prefix\n                    break;\n                }\n            }\n            const errorMessage = invalidChar ? `Invalid character '${invalidChar}' at position ${invalidPos}. Only hex characters (0-9, a-f, A-F) are allowed after 0x01` : 'Blob hash contains invalid characters. Only hex characters (0-9, a-f, A-F) are allowed after 0x01';\n            return {\n                isValid: false,\n                exists: false,\n                error: errorMessage\n            };\n        }\n        // Check for common invalid patterns\n        if (blobHash === '0x010000000000000000000000000000000000000000000000000000000000000000') {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'This is a zero blob hash which is invalid. Blob hashes cannot be all zeros.'\n            };\n        }\n        // Check for the specific invalid example mentioned\n        if (blobHash === '0x0100000000000') {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'This blob hash is too short and invalid. Valid blob hashes must be 66 characters long starting with 0x01.'\n            };\n        }\n        return {\n            isValid: true,\n            exists: false // Will be checked in next step\n        };\n    }\n    /**\n   * Checks if a blob hash actually exists on the blockchain\n   */ async checkBlobExists(blobHash) {\n        if (!this.provider) {\n            throw new Error('No provider available for blockchain queries');\n        }\n        try {\n            // Method 1: Try to get blob data using eth_getBlobByHash (if supported)\n            try {\n                const blobData = await this.provider.send('eth_getBlobByHash', [\n                    blobHash\n                ]);\n                if (blobData && blobData !== '0x') {\n                    return {\n                        exists: true,\n                        blobData: {\n                            txHash: 'Unknown',\n                            blockNumber: 0,\n                            blobIndex: 0,\n                            etherscanUrl: `https://sepolia.etherscan.io/blob/${blobHash}`\n                        }\n                    };\n                }\n            } catch (blobError) {\n                // eth_getBlobByHash might not be supported by all RPCs\n                console.log('eth_getBlobByHash not supported, trying alternative methods');\n            }\n            // Method 2: Search for blob transactions in recent blocks\n            const currentBlock = await this.provider.getBlockNumber();\n            const searchBlocks = Math.min(1000, currentBlock); // Search last 1000 blocks\n            for(let i = 0; i < searchBlocks; i += 10){\n                const blockNumber = currentBlock - i;\n                try {\n                    const block = await this.provider.getBlock(blockNumber, true);\n                    if (!block || !block.transactions) continue;\n                    for (const tx of block.transactions){\n                        if (tx && typeof tx === 'object' && 'type' in tx && tx.type === 3 && 'blobVersionedHashes' in tx && tx.blobVersionedHashes) {\n                            const blobHashes = tx.blobVersionedHashes;\n                            for(let j = 0; j < blobHashes.length; j++){\n                                if (blobHashes[j]?.toLowerCase() === blobHash.toLowerCase()) {\n                                    return {\n                                        exists: true,\n                                        blobData: {\n                                            txHash: tx.hash || 'Unknown',\n                                            blockNumber: blockNumber,\n                                            blobIndex: j,\n                                            etherscanUrl: `https://sepolia.etherscan.io/blob/${blobHash}`\n                                        }\n                                    };\n                                }\n                            }\n                        }\n                    }\n                } catch (blockError) {\n                    continue;\n                }\n            }\n            // Method 3: Try to get transaction receipt by searching for blob events\n            // This is a fallback method that might work on some RPCs\n            try {\n                const filter = {\n                    fromBlock: currentBlock - 1000,\n                    toBlock: 'latest',\n                    topics: [\n                        '0x' + ethers__WEBPACK_IMPORTED_MODULE_1__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_2__.toUtf8Bytes('LogRevealSpec(address,bytes32,bytes32,bytes32,address,uint256)')).slice(2, 10)\n                    ]\n                };\n                const logs = await this.provider.getLogs(filter);\n                for (const log of logs){\n                    if (log.topics && log.topics.length >= 3) {\n                        const logBlobHash = log.topics[2]; // blobHash is the third topic\n                        if (logBlobHash.toLowerCase() === blobHash.toLowerCase()) {\n                            return {\n                                exists: true,\n                                blobData: {\n                                    txHash: log.transactionHash,\n                                    blockNumber: log.blockNumber,\n                                    blobIndex: 0,\n                                    etherscanUrl: `https://sepolia.etherscan.io/blob/${blobHash}`\n                                }\n                            };\n                        }\n                    }\n                }\n            } catch (logError) {\n                console.log('Log search failed:', logError);\n            }\n            return {\n                exists: false\n            };\n        } catch (error) {\n            console.error('Error checking blob existence:', error);\n            throw new Error(`Failed to check blob existence: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    /**\n   * Validates multiple blob hashes at once\n   */ async validateMultipleBlobHashes(blobHashes) {\n        const results = new Map();\n        for (const blobHash of blobHashes){\n            const result = await this.validateBlobHash(blobHash);\n            results.set(blobHash, result);\n        }\n        return results;\n    }\n    /**\n   * Gets blob data from Etherscan API (alternative method)\n   */ async getBlobDataFromEtherscan(blobHash) {\n        try {\n            const response = await fetch(`https://api-sepolia.etherscan.io/api?module=proxy&action=eth_getTransactionByHash&txhash=${blobHash}`);\n            const data = await response.json();\n            if (data.result && data.result.blobVersionedHashes) {\n                return {\n                    exists: true,\n                    blobData: {\n                        txHash: data.result.hash,\n                        blockNumber: parseInt(data.result.blockNumber, 16),\n                        blobIndex: 0,\n                        etherscanUrl: `https://sepolia.etherscan.io/blob/${blobHash}`\n                    }\n                };\n            }\n            return {\n                exists: false\n            };\n        } catch (error) {\n            console.error('Etherscan API error:', error);\n            return {\n                exists: false\n            };\n        }\n    }\n}\n// Export singleton instance\nconst blobValidationService = new BlobValidationService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/blobValidationService.ts\n");

/***/ })

};
;