"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_lib_blobService_ts",{

/***/ "(app-pages-browser)/./src/lib/blobValidationService.ts":
/*!******************************************!*\
  !*** ./src/lib/blobValidationService.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobValidationService: () => (/* binding */ BlobValidationService),\n/* harmony export */   blobValidationService: () => (/* binding */ blobValidationService)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-browser.js\");\n\nclass BlobValidationService {\n    /**\n   * Validates blob hash format and checks if it exists on-chain\n   */ async validateBlobHash(blobHash) {\n        try {\n            // Step 1: Basic format validation\n            const formatValidation = this.validateBlobHashFormat(blobHash);\n            if (!formatValidation.isValid) {\n                return formatValidation;\n            }\n            // Step 2: Check if blob exists on-chain\n            const existenceCheck = await this.checkBlobExists(blobHash);\n            if (!existenceCheck.exists) {\n                return {\n                    isValid: false,\n                    exists: false,\n                    error: \"Blob hash \".concat(blobHash, \" does not exist on-chain. This could be because:\\n1. The blob was never posted to the blockchain\\n2. The blob hash is incorrect\\n3. The blob transaction failed or was reverted\\n4. You're checking on the wrong network (should be Sepolia)\")\n                };\n            }\n            return {\n                isValid: true,\n                exists: true,\n                blobData: existenceCheck.blobData\n            };\n        } catch (error) {\n            console.error('Blob validation error:', error);\n            return {\n                isValid: false,\n                exists: false,\n                error: \"Validation failed: \".concat(error instanceof Error ? error.message : String(error))\n            };\n        }\n    }\n    /**\n   * Validates the basic format of a blob hash\n   */ validateBlobHashFormat(blobHash) {\n        // Check if it's a string\n        if (typeof blobHash !== 'string') {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'Blob hash must be a string'\n            };\n        }\n        // Check if it starts with 0x01 (EIP-4844 blob version)\n        if (!blobHash.startsWith('0x01')) {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'Blob hash must start with 0x01 (EIP-4844 blob version)'\n            };\n        }\n        // Check if it's exactly 68 characters (0x01 + 64 hex chars)\n        if (blobHash.length !== 68) {\n            return {\n                isValid: false,\n                exists: false,\n                error: \"Blob hash must be exactly 68 characters (got \".concat(blobHash.length, \"). Expected format: 0x01 + 64 hex characters\")\n            };\n        }\n        // Check if it contains only valid hex characters\n        const hexRegex = /^0x01[a-fA-F0-9]{64}$/;\n        if (!hexRegex.test(blobHash)) {\n            // Find the first invalid character for better error reporting\n            const afterPrefix = blobHash.substring(4); // Remove \"0x01\"\n            let invalidChar = '';\n            let invalidPos = -1;\n            for(let i = 0; i < afterPrefix.length; i++){\n                const char = afterPrefix[i];\n                if (!/[0-9a-fA-F]/.test(char)) {\n                    invalidChar = char;\n                    invalidPos = i + 4; // +4 to account for \"0x01\" prefix\n                    break;\n                }\n            }\n            const errorMessage = invalidChar ? \"Invalid character '\".concat(invalidChar, \"' at position \").concat(invalidPos, \". Only hex characters (0-9, a-f, A-F) are allowed after 0x01\") : 'Blob hash contains invalid characters. Only hex characters (0-9, a-f, A-F) are allowed after 0x01';\n            return {\n                isValid: false,\n                exists: false,\n                error: errorMessage\n            };\n        }\n        // Check for common invalid patterns\n        if (blobHash === '0x010000000000000000000000000000000000000000000000000000000000000000') {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'This is a zero blob hash which is invalid. Blob hashes cannot be all zeros.'\n            };\n        }\n        // Check for the specific invalid example mentioned\n        if (blobHash === '0x0100000000000') {\n            return {\n                isValid: false,\n                exists: false,\n                error: 'This blob hash is too short and invalid. Valid blob hashes must be 66 characters long starting with 0x01.'\n            };\n        }\n        return {\n            isValid: true,\n            exists: false // Will be checked in next step\n        };\n    }\n    /**\n   * Checks if a blob hash actually exists on the blockchain\n   */ async checkBlobExists(blobHash) {\n        if (!this.provider) {\n            throw new Error('No provider available for blockchain queries');\n        }\n        try {\n            // Method 1: Try to get blob data using eth_getBlobByHash (if supported)\n            try {\n                const blobData = await this.provider.send('eth_getBlobByHash', [\n                    blobHash\n                ]);\n                if (blobData && blobData !== '0x') {\n                    return {\n                        exists: true,\n                        blobData: {\n                            txHash: 'Unknown',\n                            blockNumber: 0,\n                            blobIndex: 0,\n                            etherscanUrl: \"https://sepolia.etherscan.io/blob/\".concat(blobHash)\n                        }\n                    };\n                }\n            } catch (blobError) {\n                // eth_getBlobByHash might not be supported by all RPCs\n                console.log('eth_getBlobByHash not supported, trying alternative methods');\n            }\n            // Method 2: Search for blob transactions in recent blocks\n            const currentBlock = await this.provider.getBlockNumber();\n            const searchBlocks = Math.min(1000, currentBlock); // Search last 1000 blocks\n            for(let i = 0; i < searchBlocks; i += 10){\n                const blockNumber = currentBlock - i;\n                try {\n                    const block = await this.provider.getBlock(blockNumber, true);\n                    if (!block || !block.transactions) continue;\n                    for (const tx of block.transactions){\n                        if (tx && typeof tx === 'object' && 'type' in tx && tx.type === 3 && 'blobVersionedHashes' in tx && tx.blobVersionedHashes) {\n                            const blobHashes = tx.blobVersionedHashes;\n                            for(let j = 0; j < blobHashes.length; j++){\n                                var _blobHashes_j;\n                                if (((_blobHashes_j = blobHashes[j]) === null || _blobHashes_j === void 0 ? void 0 : _blobHashes_j.toLowerCase()) === blobHash.toLowerCase()) {\n                                    return {\n                                        exists: true,\n                                        blobData: {\n                                            txHash: tx.hash || 'Unknown',\n                                            blockNumber: blockNumber,\n                                            blobIndex: j,\n                                            etherscanUrl: \"https://sepolia.etherscan.io/blob/\".concat(blobHash)\n                                        }\n                                    };\n                                }\n                            }\n                        }\n                    }\n                } catch (blockError) {\n                    continue;\n                }\n            }\n            // Method 3: Try to get transaction receipt by searching for blob events\n            // This is a fallback method that might work on some RPCs\n            try {\n                const filter = {\n                    fromBlock: currentBlock - 1000,\n                    toBlock: 'latest',\n                    topics: [\n                        '0x' + ethers__WEBPACK_IMPORTED_MODULE_0__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes('LogRevealSpec(address,bytes32,bytes32,bytes32,address,uint256)')).slice(2, 10)\n                    ]\n                };\n                const logs = await this.provider.getLogs(filter);\n                for (const log of logs){\n                    if (log.topics && log.topics.length >= 3) {\n                        const logBlobHash = log.topics[2]; // blobHash is the third topic\n                        if (logBlobHash.toLowerCase() === blobHash.toLowerCase()) {\n                            return {\n                                exists: true,\n                                blobData: {\n                                    txHash: log.transactionHash,\n                                    blockNumber: log.blockNumber,\n                                    blobIndex: 0,\n                                    etherscanUrl: \"https://sepolia.etherscan.io/blob/\".concat(blobHash)\n                                }\n                            };\n                        }\n                    }\n                }\n            } catch (logError) {\n                console.log('Log search failed:', logError);\n            }\n            return {\n                exists: false\n            };\n        } catch (error) {\n            console.error('Error checking blob existence:', error);\n            throw new Error(\"Failed to check blob existence: \".concat(error instanceof Error ? error.message : String(error)));\n        }\n    }\n    /**\n   * Validates multiple blob hashes at once\n   */ async validateMultipleBlobHashes(blobHashes) {\n        const results = new Map();\n        for (const blobHash of blobHashes){\n            const result = await this.validateBlobHash(blobHash);\n            results.set(blobHash, result);\n        }\n        return results;\n    }\n    /**\n   * Gets blob data from Etherscan API (alternative method)\n   */ async getBlobDataFromEtherscan(blobHash) {\n        try {\n            const response = await fetch(\"https://api-sepolia.etherscan.io/api?module=proxy&action=eth_getTransactionByHash&txhash=\".concat(blobHash));\n            const data = await response.json();\n            if (data.result && data.result.blobVersionedHashes) {\n                return {\n                    exists: true,\n                    blobData: {\n                        txHash: data.result.hash,\n                        blockNumber: parseInt(data.result.blockNumber, 16),\n                        blobIndex: 0,\n                        etherscanUrl: \"https://sepolia.etherscan.io/blob/\".concat(blobHash)\n                    }\n                };\n            }\n            return {\n                exists: false\n            };\n        } catch (error) {\n            console.error('Etherscan API error:', error);\n            return {\n                exists: false\n            };\n        }\n    }\n    constructor(rpcUrl){\n        this.provider = null;\n        if (rpcUrl) {\n            this.provider = new ethers__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(rpcUrl);\n        } else if ( true && window.ethereum) {\n            this.provider = new ethers__WEBPACK_IMPORTED_MODULE_3__.BrowserProvider(window.ethereum);\n        }\n    }\n}\n// Export singleton instance\nconst blobValidationService = new BlobValidationService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/blobValidationService.ts\n"));

/***/ })

});