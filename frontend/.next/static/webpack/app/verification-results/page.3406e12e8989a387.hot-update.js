"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/verification-results/page",{

/***/ "(app-pages-browser)/./src/lib/web3Service.ts":
/*!********************************!*\
  !*** ./src/lib/web3Service.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3Service: () => (/* binding */ Web3Service),\n/* harmony export */   web3Service: () => (/* binding */ web3Service)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/solidity.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/units.js\");\n// @ts-nocheck\n// TypeScript is disabled in this file due to dynamic contract interactions across\n// multiple KaiSign versions and ethers v6 function APIs (e.g., .staticCall, .estimateGas\n// on function objects). Strong typing here caused noisy, non-actionable errors and\n// duplicate API variants; runtime behavior is preserved.\n\n// ABI for the KaiSign V1 contract - Updated to match actual contract interface\nconst CONTRACT_ABI = [\n    {\n        \"inputs\": [],\n        \"name\": \"minBond\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"commitment\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"targetChainId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"commitSpec\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"commitmentId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"blobHash\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"metadataHash\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"nonce\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"revealSpec\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specID\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specID\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"proposeSpec\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specID\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"assertSpecValid\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specID\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"assertSpecInvalid\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"targetChainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"duration\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"description\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"createIncentive\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"user\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"getUserIncentives\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32[]\",\n                \"name\": \"\",\n                \"type\": \"bytes32[]\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"incentives\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint80\",\n                \"name\": \"amount\",\n                \"type\": \"uint80\"\n            },\n            {\n                \"internalType\": \"uint16\",\n                \"name\": \"reserved1\",\n                \"type\": \"uint16\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"deadline\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"createdAt\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"isClaimed\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"isActive\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"description\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"commitmentId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"commitments\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"committer\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"commitTimestamp\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint32\",\n                \"name\": \"reserved1\",\n                \"type\": \"uint32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"isRevealed\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"uint80\",\n                \"name\": \"bondAmount\",\n                \"type\": \"uint80\"\n            },\n            {\n                \"internalType\": \"uint8\",\n                \"name\": \"reserved\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"revealDeadline\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"getSpecsByContract\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32[]\",\n                \"name\": \"\",\n                \"type\": \"bytes32[]\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"specs\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"createdTimestamp\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"proposedTimestamp\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint8\",\n                \"name\": \"status\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"internalType\": \"uint80\",\n                \"name\": \"totalBonds\",\n                \"type\": \"uint80\"\n            },\n            {\n                \"internalType\": \"uint32\",\n                \"name\": \"reserved\",\n                \"type\": \"uint32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"blobHash\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"questionId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specID\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"handleResult\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specID\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"claimActiveTokenIncentive\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"specID\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"settleBonds\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"ipfs\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"getStatus\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint8\",\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"ipfs\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"isAccepted\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"ipfs\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"getCreatedTimestamp\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"targetChainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"duration\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"description\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"createIncentive\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"getSpecsByContract\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32[]\",\n                \"name\": \"\",\n                \"type\": \"bytes32[]\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"getContractSpecCount\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"specs\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"createdTimestamp\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"proposedTimestamp\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint8\",\n                \"name\": \"status\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"bondsSettled\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"uint48\",\n                \"name\": \"totalBonds\",\n                \"type\": \"uint48\"\n            },\n            {\n                \"internalType\": \"uint8\",\n                \"name\": \"reserved\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"ipfs\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"questionId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"commitments\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"committer\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"commitTimestamp\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint32\",\n                \"name\": \"reserved1\",\n                \"type\": \"uint32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"isRevealed\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"uint80\",\n                \"name\": \"bondAmount\",\n                \"type\": \"uint80\"\n            },\n            {\n                \"internalType\": \"uint8\",\n                \"name\": \"reserved\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"revealDeadline\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"incentives\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint128\",\n                \"name\": \"amount\",\n                \"type\": \"uint128\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"deadline\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"createdAt\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"isClaimed\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"isActive\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"uint80\",\n                \"name\": \"reserved\",\n                \"type\": \"uint80\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"description\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"realityETH\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"treasury\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"committer\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"bytes32\",\n                \"name\": \"commitmentId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"bondAmount\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"revealDeadline\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"LogCommitSpec\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"bytes32\",\n                \"name\": \"incentiveId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"targetContract\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"chainId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"deadline\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"string\",\n                \"name\": \"description\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"LogIncentiveCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"bondsSettled\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n];\n// Reality.eth contract ABI (minimal for bond calculations)\nconst REALITY_ETH_ABI = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"question_id\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"getBond\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"question_id\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"getMinBond\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"questions\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"content_hash\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"arbitrator\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint32\",\n                \"name\": \"opening_ts\",\n                \"type\": \"uint32\"\n            },\n            {\n                \"internalType\": \"uint32\",\n                \"name\": \"timeout\",\n                \"type\": \"uint32\"\n            },\n            {\n                \"internalType\": \"uint32\",\n                \"name\": \"finalize_ts\",\n                \"type\": \"uint32\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"is_pending_arbitration\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"bounty\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"best_answer\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"history_hash\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"bond\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"min_bond\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n];\n// Reality.eth contract address (Sepolia by default)\nconst REALITY_ETH_ADDRESS =  false || \"0xaf33DcB6E8c5c4D9dDF579f53031b514d19449CA\";\n// Contract address (configurable via NEXT_PUBLIC_KAISIGN_CONTRACT_ADDRESS; falls back to known Sepolia addr)\nconst RAW_CONTRACT_ADDRESS =  false || \"0x4dFEA0C2B472a14cD052a8f9DF9f19fa5CF03719\";\n// Chain ID (configurable via NEXT_PUBLIC_CHAIN_ID, defaults to Sepolia)\nconst SEPOLIA_CHAIN_ID = Number(\"11155111\" || 0);\nclass Web3Service {\n    /**\n   * Connect to MetaMask and initialize the contract\n   */ async connect() {\n        if (false) {}\n        if (!window.ethereum) {\n            throw new Error(\"MetaMask is not installed. Please install MetaMask to continue.\");\n        }\n        try {\n            // Request account access\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            if (!accounts || accounts.length === 0) {\n                throw new Error(\"No accounts found. Please make sure MetaMask is unlocked.\");\n            }\n            // Initialize provider and signer\n            this.provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n            this.signer = await this.provider.getSigner();\n            // Initialize contract (network check moved to individual functions that need it)\n            const kaisignContract = new ethers__WEBPACK_IMPORTED_MODULE_1__.Contract(RAW_CONTRACT_ADDRESS, CONTRACT_ABI, this.signer);\n            // Assign to instance variables after successful initialization\n            this.contract = kaisignContract;\n            // Initialize Reality.eth contract now for read calls (bond info)\n            this.realityEthContract = new ethers__WEBPACK_IMPORTED_MODULE_1__.Contract(REALITY_ETH_ADDRESS, REALITY_ETH_ABI, this.provider);\n            return accounts[0];\n        } catch (error) {\n            console.error(\"Error connecting to MetaMask:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Check if we're on the Sepolia network\n   */ async checkNetwork() {\n        if (!this.provider) return false;\n        try {\n            const network = await this.provider.getNetwork();\n            return Number(network.chainId) === SEPOLIA_CHAIN_ID;\n        } catch (error) {\n            console.error(\"Error checking network:\", error);\n            return false;\n        }\n    }\n    /**\n   * Get the minimum bond amount required for a new question from the KaiSign contract\n   */ async getMinBond() {\n        try {\n            if (!this.contract) {\n                throw new Error(\"Contract not initialized. Please connect first.\");\n            }\n            const minBond = await this.contract.minBond();\n            return minBond;\n        } catch (error) {\n            console.error(\"Error getting minimum bond from contract:\", error);\n            // Fallback to a reasonable default if contract call fails\n            const fallbackBond = BigInt(\"100000000000000\"); // 0.0001 ETH\n            return fallbackBond;\n        }\n    }\n    /**\n   * Calculate the required bond for answering a specific question\n   * Based on Reality.eth rules: first answer needs min_bond, subsequent answers need 2x previous bond\n   */ async getRequiredBondForQuestion(questionId) {\n        try {\n            if (!this.realityEthContract) {\n                if (!this.provider) {\n                    throw new Error(\"Wallet not connected. Please connect first.\");\n                }\n                this.realityEthContract = new ethers__WEBPACK_IMPORTED_MODULE_1__.Contract(REALITY_ETH_ADDRESS, REALITY_ETH_ABI, this.provider);\n            }\n            // Get the current bond for this question\n            const currentBond = await this.realityEthContract.getBond(questionId);\n            if (currentBond === BigInt(0)) {\n                // No previous answers, use minimum bond\n                const minBond = await this.realityEthContract.getMinBond(questionId);\n                return minBond;\n            } else {\n                // Previous answers exist, need to double the current bond\n                const requiredBond = currentBond * BigInt(2);\n                return requiredBond;\n            }\n        } catch (error) {\n            console.error(\"Error calculating required bond for question:\", error);\n            // Fallback to contract minimum bond\n            return await this.getMinBond();\n        }\n    }\n    /**\n   * Get bond information for a question (current bond, minimum bond, and required next bond)\n   * In V1, we need to check if a spec exists first\n   */ async getBondInfo(ipfsHash1) {\n        try {\n            if (!this.contract) {\n                throw new Error(\"Contract not initialized. Please connect first.\");\n            }\n            if (!this.realityEthContract) {\n                if (!this.provider) {\n                    throw new Error(\"Wallet not connected. Please connect first.\");\n                }\n                this.realityEthContract = new ethers__WEBPACK_IMPORTED_MODULE_1__.Contract(REALITY_ETH_ADDRESS, REALITY_ETH_ABI, this.provider);\n            }\n            // Generate specID from identifier (now blob versioned hash)\n            const specId = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes(ipfsHash1));\n            try {\n                // Check if spec exists and get its data\n                const spec = await this.contract.specs(specId);\n                const questionId = spec.questionId;\n                if (questionId === \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n                    // Question doesn't exist yet, return contract minimum bond with safety margin\n                    const contractMinBond = await this.getMinBond();\n                    const requiredBond = BigInt(\"20000000000000000\"); // Use 0.02 ETH instead of calculated amount\n                    return {\n                        currentBond: BigInt(0),\n                        minBond: contractMinBond,\n                        requiredNextBond: requiredBond,\n                        hasAnswers: false\n                    };\n                }\n                // Get bond information from Reality.eth\n                const currentBond = await this.realityEthContract.getBond(questionId);\n                const minBond = await this.realityEthContract.getMinBond(questionId);\n                const hasAnswers = currentBond > BigInt(0);\n                const baseRequiredBond = hasAnswers ? currentBond * BigInt(2) : minBond;\n                // Add safety margin for all bonds\n                const requiredNextBond = BigInt(\"15000000000000000\"); // Use 0.015 ETH instead of calculated amount\n                return {\n                    currentBond,\n                    minBond,\n                    requiredNextBond,\n                    hasAnswers\n                };\n            } catch (specError) {\n                // Spec doesn't exist yet, return contract minimum bond with safety margin\n                const contractMinBond = await this.getMinBond();\n                const requiredBond = BigInt(\"20000000000000000\"); // Use 0.02 ETH instead of calculated amount\n                return {\n                    currentBond: BigInt(0),\n                    minBond: contractMinBond,\n                    requiredNextBond: requiredBond,\n                    hasAnswers: false\n                };\n            }\n        } catch (error) {\n            console.error(\"Error getting bond info:\", error);\n            // Fallback to contract minimum bond with safety margin\n            const contractMinBond = await this.getMinBond();\n            const requiredBond = contractMinBond + contractMinBond / BigInt(10); // Add 10% safety margin\n            return {\n                currentBond: BigInt(0),\n                minBond: contractMinBond,\n                requiredNextBond: requiredBond,\n                hasAnswers: false\n            };\n        }\n    }\n    /**\n   * Commit spec using V1 contract (step 1 of commit-reveal pattern)\n   */ // The commitSpec method no longer takes an incentiveId. Incentives are created ahead\n    // of time and automatically assigned when a spec is accepted. The function signature\n    // accepts blobHash, bondAmount, an optional targetContract and optional chainId.\n    async commitSpec(blobHash, bondAmount, targetContract, targetChainId) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // Make sure we're on the Sepolia network\n            // Network check removed - let users connect on any network\n            // Generate a proper nonce for the commitment\n            const nonce = BigInt(Math.floor(Math.random() * 1000000));\n            // The blobHash parameter is actually the metadataHash (hash of JSON)\n            // This is a naming issue - it should be called metadataHash\n            const metadataHash = blobHash;\n            // Create the commitment using metadataHash and nonce (as per contract)\n            const commitment = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPacked([\n                \"bytes32\",\n                \"uint256\"\n            ], [\n                metadataHash,\n                nonce\n            ]));\n            // The V1 contract requires the target contract to exist on Sepolia (extcodesize check)\n            // For ERC7730 specs, we want to allow any contract address (even from other chains)\n            // But V1 contract validates existence, so we need a deployed contract on Sepolia\n            let target = targetContract;\n            // Known working Sepolia contracts for testing\n            const validSepoliaContracts = [\n                RAW_CONTRACT_ADDRESS,\n                \"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\",\n                \"0x779877A7B0D9E8603169DdbD7836e478b4624789\"\n            ];\n            if (!target || target.trim() === \"\" || !target.match(/^0x[a-fA-F0-9]{40}$/)) {\n                // Use KaiSign contract as default if no valid target specified\n                target = RAW_CONTRACT_ADDRESS;\n            } else {\n                // Check if the target contract exists on Sepolia\n                try {\n                    const targetCode = await this.provider.getCode(target);\n                    if (targetCode === \"0x\") {\n                        console.warn(\"⚠️ Target contract\", target, \"does not exist on Sepolia\");\n                        console.warn(\"V1 contract requires target to exist on same network\");\n                        console.warn(\"Falling back to KaiSign contract as target\");\n                        target = RAW_CONTRACT_ADDRESS;\n                    } else {}\n                } catch (codeCheckError) {\n                    console.warn(\"Could not verify target contract existence, using KaiSign contract as fallback\");\n                    target = RAW_CONTRACT_ADDRESS;\n                }\n            }\n            // Incentives are no longer passed during commit. Any incentive will be automatically\n            // associated by the contract when a spec is accepted. Keep a zero bytes32 for\n            // compatibility in logs if needed.\n            const finalIncentiveId = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n            // Validate minimum bond requirement with safety margin\n            const contractMinBond = await this.getMinBond();\n            // Add 10% safety margin to account for platform fees and rounding\n            const requiredBond = contractMinBond + contractMinBond / BigInt(10);\n            if (bondAmount < requiredBond) {\n                throw new Error(\"Insufficient bond. Required: \".concat((Number(requiredBond) / 10 ** 18).toFixed(5), \" ETH (including safety margin for fees)\"));\n            }\n            // CRITICAL: Run comprehensive diagnostics BEFORE attempting transaction\n            // For commitSpec, we don't send any value, so pass 0n for bond amount\n            await this.runPreTransactionDiagnostics(target, 0n);\n            // Additional validation: Check if contract is properly deployed and accessible\n            try {\n                const contractCode = await this.provider.getCode(RAW_CONTRACT_ADDRESS);\n                // Test a simple read function first\n                const testMinBond = await this.contract.minBond();\n                // Check if contract is paused (V1 has Pausable)\n                try {\n                    // Try to call the paused() function if it exists\n                    const pausedCall = await this.provider.call({\n                        to: RAW_CONTRACT_ADDRESS,\n                        data: \"0x5c975abb\" // paused() function selector\n                    });\n                    const isPaused = pausedCall === \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n                    if (isPaused) {\n                        throw new Error(\"Contract is currently paused\");\n                    }\n                } catch (pauseCheckError) {}\n                // Special test: Check if the target contract validation is the issue\n                const targetContractCode = await this.provider.getCode(target);\n                if (targetContractCode === \"0x\") {\n                    console.error(\"❌ FOUND THE ISSUE: Target contract has no code!\");\n                    console.error(\"The contract's extcodesize check will fail for this target.\");\n                    throw new Error(\"Target contract \".concat(target, \" does not exist or has no bytecode. The V1 contract requires the target contract to exist on Sepolia.\"));\n                } else {}\n                // Check if treasury address is valid and can receive funds\n                try {\n                    // Get treasury address from the contract\n                    const treasurySelector = \"0x61d027b3\"; // treasury() function selector\n                    const treasuryResult = await this.provider.call({\n                        to: RAW_CONTRACT_ADDRESS,\n                        data: treasurySelector\n                    });\n                    const treasuryAddress = \"0x\" + treasuryResult.slice(-40);\n                    // Check if treasury is a valid address (not zero address)\n                    if (treasuryAddress === \"0x0000000000000000000000000000000000000000\") {\n                        console.error(\"❌ ISSUE FOUND: Treasury address is zero address!\");\n                        throw new Error(\"Treasury address is not set properly in the contract\");\n                    }\n                    // Check if treasury can receive funds (not a contract that might reject)\n                    const treasuryCode = await this.provider.getCode(treasuryAddress);\n                    if (treasuryCode.length > 2) {\n                        // Try a tiny test transfer to see if treasury can receive funds\n                        try {\n                            const testAmount = BigInt(1); // 1 wei\n                            await this.provider.call({\n                                to: treasuryAddress,\n                                value: testAmount,\n                                from: await this.signer.getAddress()\n                            });\n                        } catch (treasuryTestError) {\n                            console.error(\"❌ POSSIBLE ISSUE: Treasury might reject fund transfers:\", treasuryTestError);\n                        }\n                    } else {}\n                } catch (treasuryError) {\n                    console.error(\"Could not check treasury address:\", treasuryError);\n                }\n            } catch (contractError) {\n                console.error(\"Contract accessibility test failed:\", contractError);\n                throw contractError; // Re-throw the specific error instead of generic one\n            }\n            // Step 1: Commit\n            // Check if commitment already exists\n            try {\n                const commitmentId = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPacked([\n                    \"bytes32\",\n                    \"address\",\n                    \"address\",\n                    \"uint256\"\n                ], [\n                    commitment,\n                    await this.signer.getAddress(),\n                    target,\n                    Math.floor(Date.now() / 1000)\n                ]));\n                const existingCommitment = await this.contract.commitments(commitmentId);\n                console.log(\"Checking if commitment already exists:\", existingCommitment.committer !== ethers__WEBPACK_IMPORTED_MODULE_5__.ZeroAddress);\n                // Try a static call first to see if it would succeed\n                const staticResult = await this.contract.commitSpec.staticCall(commitment, target, targetChainId || 1);\n                console.log(\"Static call successful, proceeding with transaction\");\n            } catch (checkError) {\n                console.error(\"Pre-transaction checks failed:\", checkError);\n                // If it's a revert, try to get more info\n                if (checkError.data) {}\n                throw new Error(\"Pre-transaction validation failed: \".concat(checkError.message));\n            }\n            // Try manual gas estimation\n            try {\n                const gasEstimate = await this.contract.commitSpec.estimateGas(commitment, target, targetChainId || 1);\n            } catch (gasError) {\n                console.error(\"Gas estimation failed:\", gasError);\n                throw new Error(\"Gas estimation failed: \".concat(gasError.message));\n            }\n            const commitTx = await this.contract.commitSpec(commitment, target, targetChainId || 1);\n            const commitReceipt = await commitTx.wait();\n            // Step 2: Extract the actual commitment ID from the LogCommitSpec event\n            let commitmentId = null;\n            for (const log of commitReceipt.logs){\n                try {\n                    const parsed = this.contract.interface.parseLog(log);\n                    if (parsed && parsed.name === 'LogCommitSpec') {\n                        commitmentId = parsed.args.commitmentId;\n                        break;\n                    }\n                } catch (e) {\n                // Ignore logs that can't be parsed by our interface\n                }\n            }\n            if (!commitmentId) {\n                throw new Error(\"Could not find LogCommitSpec event in transaction logs\");\n            }\n            return {\n                commitmentId,\n                commitTxHash: commitTx.hash,\n                revealDeadline: Math.floor(Date.now() / 1000) + 3600,\n                nonce: Number(nonce),\n                commitment,\n                metadataHash\n            };\n        } catch (error) {\n            var _error_message, _error_message1, _error_message2, _error_message3, _error_message4;\n            console.error(\"Error proposing spec:\", error);\n            // Enhanced error handling for V1 contract specific issues\n            if (((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"missing revert data\")) && !error.data) {\n                // Try a different approach - use a known good contract as target\n                const knownGoodContracts = [\n                    \"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\",\n                    \"0x779877A7B0D9E8603169DdbD7836e478b4624789\"\n                ];\n                for (const testTarget1 of knownGoodContracts){\n                    try {\n                        const testCode = await this.provider.getCode(testTarget1);\n                        if (testCode !== \"0x\") {\n                            return await this.directCommitReveal(ipfsHash, bondAmount, testTarget1);\n                        }\n                    } catch (testError) {}\n                }\n                try {\n                    return await this.directCommitReveal(ipfsHash, bondAmount, RAW_CONTRACT_ADDRESS);\n                } catch (directError) {\n                    console.error(\"Direct transaction also failed:\", directError);\n                // Continue with original error handling\n                }\n            }\n            // Try to decode custom error\n            if (error.reason) {\n                console.error(\"Contract revert reason:\", error.reason);\n            }\n            if (error.data) {\n                console.error(\"Contract error data:\", error.data);\n                // Try to decode known custom errors from the V1 contract\n                try {\n                    const errorSignatures = {\n                        \"0x4ca88867\": \"AlreadyProposed()\",\n                        \"0xfb8f41b2\": \"NotProposed()\",\n                        \"0x47df8ce0\": \"InsufficientBond()\",\n                        \"0xd2e74c4c\": \"InsufficientIncentive()\",\n                        \"0x6efc7261\": \"InvalidContract()\",\n                        \"0xed592624\": \"ContractNotFound()\",\n                        \"0x5fd9a6de\": \"InvalidIPFS()\",\n                        \"0x0982e9b5\": \"CommitmentNotFound()\",\n                        \"0x6e9ad0b3\": \"CommitmentExpired()\",\n                        \"0x4221d9dc\": \"CommitmentAlreadyRevealed()\",\n                        \"0x8baa579f\": \"InvalidReveal()\",\n                        \"0xf1a2b62a\": \"NotFinalized()\",\n                        \"0x9cf8e11f\": \"AlreadySettled()\",\n                        \"0xa7648c19\": \"NoIncentiveToClaim()\",\n                        \"0xc3e2a8b1\": \"IncentiveExpired()\",\n                        \"0x82b42900\": \"Unauthorized()\"\n                    };\n                    const errorSelector = error.data.slice(0, 10);\n                    const customError = errorSignatures[errorSelector];\n                    if (customError) {\n                        throw new Error(\"Contract reverted with: \".concat(customError));\n                    }\n                } catch (decodeError) {\n                    console.error(\"Could not decode error:\", decodeError);\n                }\n            }\n            // If we can't decode it, check for common issues\n            if (((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"insufficient funds\")) || ((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes(\"InsufficientBond\"))) {\n                throw new Error(\"Insufficient bond amount. Please check the minimum bond requirement.\");\n            }\n            if ((_error_message3 = error.message) === null || _error_message3 === void 0 ? void 0 : _error_message3.includes(\"ContractNotFound\")) {\n                throw new Error(\"The target contract \".concat(targetContract || 'specified', \" does not exist on Sepolia testnet. The V1 contract requires target contracts to be deployed on the same network. Please use a valid Sepolia contract address or leave empty for general specifications.\"));\n            }\n            if ((_error_message4 = error.message) === null || _error_message4 === void 0 ? void 0 : _error_message4.includes(\"InvalidContract\")) {\n                throw new Error(\"Invalid target contract address format.\");\n            }\n            throw new Error(\"Transaction failed: \".concat(error.message || 'Unknown error'));\n        }\n    }\n    /**\n   * Reveal spec using V1 contract (step 2 of commit-reveal pattern)\n   */ async revealSpec(commitmentId, blobHash, metadataHash, nonce, bondAmount) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            console.log(\"revealSpec called with:\", {\n                commitmentId,\n                blobHash,\n                metadataHash,\n                nonce,\n                bondAmount: bondAmount.toString()\n            });\n            // Debug: Check what the contract has stored for this commitment\n            try {\n                const storedCommitment = await this.contract.commitments(commitmentId);\n                console.log(\"Stored commitment data:\", {\n                    committer: storedCommitment[0],\n                    commitTimestamp: storedCommitment[1].toString(),\n                    reserved1: storedCommitment[2].toString(),\n                    targetContract: storedCommitment[3],\n                    isRevealed: storedCommitment[4],\n                    bondAmount: storedCommitment[5].toString(),\n                    reserved: storedCommitment[6].toString(),\n                    revealDeadline: storedCommitment[7].toString(),\n                    chainId: storedCommitment[8].toString(),\n                    incentiveId: storedCommitment[9]\n                });\n                // Check if we're the right committer\n                const ourAddress = await this.signer.getAddress();\n                console.log(\"Our address:\", ourAddress);\n                console.log(\"Committer address:\", storedCommitment[0]);\n                // Check if commitment expired\n                const currentTime = Math.floor(Date.now() / 1000);\n                const revealDeadline = Number(storedCommitment[7]);\n                console.log(\"Current time:\", currentTime);\n                console.log(\"Reveal deadline:\", revealDeadline);\n                if (currentTime > revealDeadline) {\n                    throw new Error(\"Commitment has expired. Please create a new commitment.\");\n                }\n                // Let's verify what commitment the contract expects\n                const expectedCommitment = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPacked([\n                    \"bytes32\",\n                    \"uint256\"\n                ], [\n                    metadataHash,\n                    BigInt(nonce)\n                ]));\n                console.log(\"Expected commitment hash:\", expectedCommitment);\n                // Reconstruct the commitment ID as the contract would\n                const reconstructedCommitmentId = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPacked([\n                    \"bytes32\",\n                    \"address\",\n                    \"address\",\n                    \"uint256\",\n                    \"uint64\"\n                ], [\n                    expectedCommitment,\n                    storedCommitment[0],\n                    storedCommitment[3],\n                    storedCommitment[8],\n                    storedCommitment[1]\n                ]));\n                console.log(\"Reconstructed commitment ID:\", reconstructedCommitmentId);\n                console.log(\"Provided commitment ID:\", commitmentId);\n                console.log(\"Do they match?\", reconstructedCommitmentId === commitmentId);\n                if (reconstructedCommitmentId !== commitmentId) {\n                    console.error(\"Commitment ID mismatch! The nonce or metadata hash doesn't match what was used during commit.\");\n                    console.log(\"This commitment was created with a different nonce or metadata hash.\");\n                    console.log(\"Please ensure you're using the exact same nonce that was returned during commit.\");\n                }\n            } catch (debugError) {\n                console.log(\"Debug error (non-critical):\", debugError);\n            }\n            // Try a static call first to see what exactly fails\n            try {\n                await this.contract.revealSpec.staticCall(commitmentId, blobHash, metadataHash, BigInt(nonce), {\n                    value: bondAmount\n                });\n            } catch (staticError) {}\n            const revealTx = await this.contract.revealSpec(commitmentId, blobHash, metadataHash, BigInt(nonce), {\n                value: bondAmount\n            });\n            const revealReceipt = await revealTx.wait();\n            return revealTx.hash;\n        } catch (error) {\n            console.error(\"Error revealing spec:\", error);\n            throw new Error(\"Reveal failed: \".concat(error.message || 'Unknown error'));\n        }\n    }\n    /**\n   * Complete submit flow (for backward compatibility)\n   */ async submitSpec(blobHash, bondAmount, targetContract, targetChainId) {\n        // The submitSpec convenience method commits then immediately reveals the spec.\n        // Incentives are no longer passed as part of commit.\n        const commitResult = await this.commitSpec(blobHash, bondAmount, targetContract, targetChainId);\n        return await this.revealSpec(commitResult.commitmentId, blobHash, commitResult.metadataHash, commitResult.nonce, bondAmount);\n    }\n    /**\n   * Get the questionId from the contract for a given IPFS hash\n   * In V1, we need to find the specID first, then get the questionId from the spec\n   */ async getQuestionId(ipfsHash1) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // Generate specID from the blob versioned hash\n            const specId = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes(ipfsHash1));\n            // Get the spec data\n            const spec = await this.contract.specs(specId);\n            const questionId = spec.questionId;\n            return questionId;\n        } catch (error) {\n            console.error(\"Error getting questionId:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Get the current status of a specification from the contract\n   * Returns: 0 = Submitted, 1 = Accepted, 2 = Rejected\n   */ async getSpecStatus(ipfsHash1) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // We know contract is not null here\n            const status = await this.contract.getStatus(ipfsHash1);\n            return Number(status);\n        } catch (error) {\n            console.error(\"Error getting spec status:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Check if a specification is accepted\n   */ async isSpecAccepted(ipfsHash1) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // We know contract is not null here\n            const isAccepted = await this.contract.isAccepted(ipfsHash1);\n            return isAccepted;\n        } catch (error) {\n            console.error(\"Error checking if spec is accepted:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Handle the result of a Reality.eth question by calling the contract's handleResult function\n   */ async handleResult(ipfsHash1) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // Make sure we're on the Sepolia network\n            // Network check removed - let users connect on any network\n            // Generate specID from IPFS hash\n            const specId = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes(ipfsHash1));\n            // We know contract is not null here\n            const tx = await this.contract.handleResult(specId);\n            // Wait for transaction to be confirmed\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error handling result:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Get the IPFS hash from the contract for a given specID\n   */ async getIPFSByHash(specID) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // In V1, get the spec data and extract IPFS\n            const spec = await this.contract.specs(specID);\n            const ipfsHash1 = spec.ipfs;\n            return ipfsHash1;\n        } catch (error) {\n            console.error(\"Error getting IPFS hash:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Create an incentive for a target contract (V1 feature)\n   */ async createIncentive(targetContract, targetChainId, amount, duration, description) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            const tx = await this.contract.createIncentive(targetContract, targetChainId, amount, duration, description, {\n                value: amount\n            });\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error creating incentive:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Get specs by contract address (V1 feature)\n   */ async getSpecsByContract(contractAddress) {\n        let chainId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 11155111;\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            const specIds = await this.contract.getSpecsByContract(contractAddress, chainId);\n            return specIds;\n        } catch (error) {\n            console.error(\"Error getting specs by contract:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Get ALL specs for a user by querying SpecRevealed events\n   */ async getAllUserSpecsByEvents(userAddress) {\n        try {\n            if (!this.contract || !this.provider) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // Get recent blocks to search for events\n            const currentBlock = await this.provider.getBlockNumber();\n            const fromBlock = Math.max(0, currentBlock - 50000); // Last ~7 days on mainnet\n            // Query SpecRevealed events for this user\n            const filter = this.contract.filters.SpecRevealed(null, userAddress, null);\n            const events = await this.contract.queryFilter(filter, fromBlock, currentBlock);\n            const userSpecs = [];\n            for (const event of events){\n                if (event.args && event.args.specId) {\n                    const specId = event.args.specId;\n                    userSpecs.push(specId);\n                }\n            }\n            // Also check LogRevealSpec events (older format)\n            try {\n                const logRevealFilter = this.contract.filters.LogRevealSpec(userAddress, null, null, null);\n                const logRevealEvents = await this.contract.queryFilter(logRevealFilter, fromBlock, currentBlock);\n                for (const event of logRevealEvents){\n                    if (event.args && event.args.specID) {\n                        const specId = event.args.specID;\n                        if (!userSpecs.includes(specId)) {\n                            userSpecs.push(specId);\n                        }\n                    }\n                }\n            } catch (logError) {}\n            return userSpecs;\n        } catch (error) {\n            console.error(\"Error getting user specs by events:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Get contract spec count (V1 feature)\n   */ async getContractSpecCount(contractAddress) {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            const count = await this.contract.getContractSpecCount(contractAddress);\n            return Number(count);\n        } catch (error) {\n            console.error(\"Error getting contract spec count:\", error);\n            throw error;\n        }\n    }\n    // Diagnostic functions removed to clean up console output\n    /**\n   * Direct commit-reveal implementation for troubleshooting\n   */ async directCommitReveal(ipfsHash1, bondAmount, targetContract) {\n        try {\n            if (!this.signer || !this.provider) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            const nonce = BigInt(Math.floor(Math.random() * 1000000));\n            const commitment = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPacked([\n                \"string\",\n                \"uint256\"\n            ], [\n                ipfsHash1,\n                nonce\n            ]));\n            const target = targetContract || RAW_CONTRACT_ADDRESS;\n            // Determine the chainId from the provider's network; fallback to 1 (Sepolia)\n            let networkChainId = 1;\n            try {\n                const network = await this.provider.getNetwork();\n                networkChainId = Number(network.chainId);\n            } catch (_) {\n                networkChainId = 1;\n            }\n            // Manually encode the function call for commitSpec(bytes32,address,uint256)\n            const functionSelector = ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"commitSpec(bytes32,address,uint256)\").slice(0, 10);\n            const encodedParams = ethers__WEBPACK_IMPORTED_MODULE_7__.concat([\n                ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(commitment, 32),\n                ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(target, 32),\n                ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(ethers__WEBPACK_IMPORTED_MODULE_8__.toBeHex(networkChainId), 32)\n            ]);\n            const txData = ethers__WEBPACK_IMPORTED_MODULE_7__.concat([\n                functionSelector,\n                encodedParams\n            ]);\n            // Send the transaction directly\n            const tx = await this.signer.sendTransaction({\n                to: RAW_CONTRACT_ADDRESS,\n                data: txData,\n                value: bondAmount,\n                gasLimit: 500000 // Set a reasonable gas limit\n            });\n            // Wait for confirmation  \n            const receipt = await tx.wait();\n            if (receipt.status === 0) {\n                console.error(\"❌ Transaction reverted with status 0\");\n                // Try to get the revert reason using eth_call with the same transaction data at the block before\n                try {\n                    await this.provider.call({\n                        to: RAW_CONTRACT_ADDRESS,\n                        data: txData,\n                        value: bondAmount,\n                        from: await this.signer.getAddress(),\n                        blockTag: receipt.blockNumber - 1\n                    });\n                } catch (callError) {\n                    if (callError.data) {\n                        // Calculate error signatures dynamically to ensure accuracy\n                        const errorMappings = [\n                            \"AlreadyProposed()\",\n                            \"NotProposed()\",\n                            \"InsufficientBond()\",\n                            \"InsufficientIncentive()\",\n                            \"InvalidContract()\",\n                            \"ContractNotFound()\",\n                            \"InvalidIPFS()\",\n                            \"CommitmentNotFound()\",\n                            \"CommitmentExpired()\",\n                            \"CommitmentAlreadyRevealed()\",\n                            \"InvalidReveal()\",\n                            \"NotFinalized()\",\n                            \"AlreadySettled()\",\n                            \"NoIncentiveToClaim()\",\n                            \"IncentiveExpired()\",\n                            \"Unauthorized()\"\n                        ];\n                        const errorSignatures = {};\n                        errorMappings.forEach((error)=>{\n                            const selector = ethers__WEBPACK_IMPORTED_MODULE_6__.id(error).slice(0, 10);\n                            errorSignatures[selector] = error;\n                        });\n                        // Add generic error\n                        errorSignatures[\"0x08c379a0\"] = \"Error(string)\";\n                        const selector = callError.data.slice(0, 10);\n                        if (errorSignatures[selector]) {\n                            // Provide specific guidance\n                            if (selector === \"0xed592624\") {} else if (selector === \"0x47df8ce0\") {} else if (selector === \"0x82b42900\") {}\n                            throw new Error(\"Contract reverted with: \".concat(errorSignatures[selector]));\n                        } else {}\n                    }\n                }\n                throw new Error(\"Transaction was mined but reverted. Check console logs for details.\");\n            }\n            return tx.hash;\n        } catch (error) {\n            console.error(\"❌ Direct transaction failed:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Run comprehensive diagnostics before attempting a transaction\n   */ async runPreTransactionDiagnostics(targetContract, bondAmount) {\n        try {\n            if (!this.contract || !this.signer || !this.provider) {\n                throw new Error(\"Not connected\");\n            }\n            const userAddress = await this.signer.getAddress();\n            // 1. Check user's ETH balance\n            const balance = await this.provider.getBalance(userAddress);\n            if (balance < bondAmount) {\n                throw new Error(\"Insufficient ETH balance. Need \".concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(bondAmount), \" ETH but only have \").concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(balance), \" ETH\"));\n            }\n            // 2. Check contract pause status\n            try {\n                const pausedResult = await this.provider.call({\n                    to: RAW_CONTRACT_ADDRESS,\n                    data: \"0x5c975abb\" // paused() selector\n                });\n                const isPaused = pausedResult === \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n                if (isPaused) {\n                    throw new Error(\"Contract is currently paused\");\n                }\n            } catch (pauseError) {}\n            // 3. Validate target contract exists and has bytecode\n            const targetCode = await this.provider.getCode(targetContract);\n            if (targetCode === \"0x\") {\n                throw new Error(\"Target contract \".concat(targetContract, \" does not exist on Sepolia testnet\"));\n            }\n            // 4. Check treasury address configuration\n            try {\n                const treasuryAddress = await this.contract.treasury();\n                if (treasuryAddress === \"0x0000000000000000000000000000000000000000\") {\n                    throw new Error(\"Treasury address is not configured (zero address)\");\n                }\n                // Check if treasury can receive funds\n                const treasuryCode = await this.provider.getCode(treasuryAddress);\n                if (treasuryCode.length > 2) {\n                    // Treasury is a contract, test if it can receive funds\n                    try {\n                        await this.provider.call({\n                            to: treasuryAddress,\n                            value: BigInt(1),\n                            from: userAddress\n                        });\n                    } catch (treasuryTestError) {\n                        console.warn(\"Treasury test failed:\", treasuryTestError);\n                    }\n                }\n                // CRITICAL: Test the exact platform fee transfer that happens in commitSpec\n                const platformFee = bondAmount * BigInt(5) / BigInt(100);\n                if (platformFee > BigInt(0)) {\n                    try {\n                        await this.provider.call({\n                            to: treasuryAddress,\n                            value: platformFee,\n                            from: userAddress,\n                            gasLimit: 50000 // Match contract gas limit\n                        });\n                    } catch (testError) {\n                        console.error(\"❌ Treasury transfer test failed:\", testError.message);\n                        console.warn(\"Transaction may fail at treasury transfer\");\n                    }\n                }\n            } catch (treasuryError) {\n                console.warn(\"Treasury check failed:\", treasuryError);\n                console.warn(\"Continuing despite treasury issues - transaction will likely fail\");\n            }\n            // 5. Check minimum bond requirement\n            const contractMinBond = await this.contract.minBond();\n            // Skip bond amount check for commitSpec (bondAmount is 0 for commit)\n            // Bonds are only required during reveal\n            if (bondAmount > 0n && bondAmount < contractMinBond) {\n                throw new Error(\"Bond amount \".concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(bondAmount), \" ETH is below minimum required \").concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(contractMinBond), \" ETH\"));\n            }\n            // 6. Calculate platform fee and verify sufficient funds\n            // NOTE: commitSpec doesn't take any payment, so skip this check when bondAmount is 0\n            // The bond is only paid during reveal\n            if (bondAmount > 0n) {\n                const platformFee = bondAmount * BigInt(5) / BigInt(100); // 5% platform fee\n                const netBondAmount = bondAmount - platformFee; // Amount actually used as bond\n                if (netBondAmount < contractMinBond) {\n                    // Calculate required total to meet minimum after fee deduction\n                    const requiredTotal = contractMinBond * BigInt(100) / BigInt(95); // Reverse calculation\n                    throw new Error(\"After platform fee, net bond would be \".concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(netBondAmount), \" ETH, but minimum required is \").concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(contractMinBond), \" ETH. Send at least \").concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(requiredTotal), \" ETH\"));\n                }\n            }\n            // 7. Test Reality.eth contract connectivity\n            try {\n                // Skip Reality.eth connectivity test for now\n                console.log(\"✓ Skipping Reality.eth connectivity test\");\n            // const realityCode = await this.provider.getCode(realityEthAddress);\n            // if (realityCode === \"0x\") {\n            //   throw new Error(\"Reality.eth contract not found at configured address\");\n            // }\n            } catch (realityError) {\n                console.error(\"Reality.eth check failed:\", realityError);\n                throw new Error(\"Could not verify Reality.eth integration\");\n            }\n            // 8. Test contract function availability with static call\n            try {\n                const testCommitment = \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\";\n                // commitSpec in V1 accepts only (bytes32 commitment, address targetContract, uint256 chainId).\n                // Do not pass an incentiveId here, as the V1 contract does not include that parameter.\n                // IMPORTANT: commitSpec is NOT payable - no value should be sent\n                await this.contract.commitSpec.staticCall(testCommitment, targetContract, 1, {\n                    from: userAddress\n                });\n            } catch (staticError) {\n                console.error(\"❌ Static call failed:\", staticError);\n                if (staticError.data) {\n                    // Try to decode the error\n                    const errorMappings = [\n                        {\n                            selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"InsufficientBond()\").slice(0, 10),\n                            name: \"InsufficientBond\"\n                        },\n                        {\n                            selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"ContractNotFound()\").slice(0, 10),\n                            name: \"ContractNotFound\"\n                        },\n                        {\n                            selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"InvalidContract()\").slice(0, 10),\n                            name: \"InvalidContract\"\n                        },\n                        {\n                            selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"Unauthorized()\").slice(0, 10),\n                            name: \"Unauthorized\"\n                        },\n                        {\n                            selector: \"0xd92e233d\",\n                            name: \"Paused\"\n                        }\n                    ];\n                    const errorSelector = staticError.data.slice(0, 10);\n                    const knownError = errorMappings.find((e)=>e.selector === errorSelector);\n                    if (knownError) {\n                        throw new Error(\"Contract would revert with: \".concat(knownError.name, \"()\"));\n                    } else {\n                        throw new Error(\"Contract would revert with unknown error: \".concat(errorSelector));\n                    }\n                } else {\n                    throw new Error(\"Contract function call would fail (no revert data available)\");\n                }\n            }\n            // 9. Gas estimation test\n            try {\n                const testCommitment = \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\";\n                // Remove the testIncentive parameter; commitSpec only takes three arguments.\n                const gasEstimate = await this.contract.commitSpec.estimateGas(testCommitment, targetContract, 1, {\n                    value: bondAmount\n                });\n                if (gasEstimate > BigInt(1000000)) {\n                    console.warn(\"⚠️ High gas estimate - transaction might be complex\");\n                }\n            } catch (gasError) {\n                console.error(\"Gas estimation failed:\", gasError);\n                throw new Error(\"Could not estimate gas for transaction\");\n            }\n        } catch (error) {\n            console.error(\"❌ Pre-transaction diagnostics failed:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Comprehensive contract analysis to understand what's deployed\n   */ async analyzeContract() {\n        try {\n            if (!this.provider || !this.signer) {\n                throw new Error(\"Not connected\");\n            }\n            // 1. Check if there's any bytecode\n            const code = await this.provider.getCode(RAW_CONTRACT_ADDRESS);\n            if (code === \"0x\") {\n                console.error(\"❌ No contract deployed at this address\");\n                return;\n            }\n            // 2. Test function selectors to identify which contract is deployed\n            const selectors = {\n                \"minBond()\": \"0x1bb659ae\",\n                // Use the new 3-parameter commitSpec selector for V1 contracts\n                \"commitSpec(bytes32,address,uint256)\": \"0x\" + ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"commitSpec(bytes32,address,uint256)\").slice(2, 10),\n                \"createSpec(string)\": \"0x8cd8db49\",\n                \"paused()\": \"0x5c975abb\",\n                \"ADMIN_ROLE()\": \"0x75b238fc\",\n                \"realityETH()\": \"0xb0b61b9b\",\n                \"templateId()\": \"0x66d8ac19\"\n            };\n            for (const [funcName, selector] of Object.entries(selectors)){\n                try {\n                    const result = await this.provider.call({\n                        to: RAW_CONTRACT_ADDRESS,\n                        data: selector + \"0\".repeat(192) // Add padding for parameters\n                    });\n                } catch (error) {\n                    if (error.data && error.data !== \"0x\") {} else {}\n                }\n            }\n            // 3. Test commitSpec specifically with detailed analysis\n            try {\n                const testCommitment = \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\";\n                const testTarget1 = RAW_CONTRACT_ADDRESS;\n                const minBond = BigInt(\"100000000000000\"); // 0.0001 ETH\n                // Encode the call to the new 3-parameter commitSpec\n                const encodedCall = ethers__WEBPACK_IMPORTED_MODULE_7__.concat([\n                    ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"commitSpec(bytes32,address,uint256)\").slice(0, 10),\n                    ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(testCommitment, 32),\n                    ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(testTarget1, 32),\n                    ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(ethers__WEBPACK_IMPORTED_MODULE_8__.toBeHex(1), 32) // chainId = 1 for test\n                ]);\n                // Try static call\n                const result = await this.provider.call({\n                    to: RAW_CONTRACT_ADDRESS,\n                    data: encodedCall,\n                    value: minBond,\n                    from: await this.signer.getAddress()\n                });\n            } catch (commitError) {\n                if (commitError.data) {\n                    // Try to decode the error\n                    if (commitError.data.length >= 10) {\n                        const errorSelector = commitError.data.slice(0, 10);\n                        // Calculate error signatures dynamically to ensure accuracy\n                        const errorMappings = [\n                            \"AlreadyProposed()\",\n                            \"NotProposed()\",\n                            \"InsufficientBond()\",\n                            \"InsufficientIncentive()\",\n                            \"InvalidContract()\",\n                            \"ContractNotFound()\",\n                            \"InvalidIPFS()\",\n                            \"CommitmentNotFound()\",\n                            \"CommitmentExpired()\",\n                            \"CommitmentAlreadyRevealed()\",\n                            \"InvalidReveal()\",\n                            \"NotFinalized()\",\n                            \"AlreadySettled()\",\n                            \"NoIncentiveToClaim()\",\n                            \"IncentiveExpired()\",\n                            \"Unauthorized()\"\n                        ];\n                        const knownErrors = {};\n                        errorMappings.forEach((error)=>{\n                            const selector = ethers__WEBPACK_IMPORTED_MODULE_6__.id(error).slice(0, 10);\n                            knownErrors[selector] = error;\n                        });\n                        // Add known OpenZeppelin errors\n                        knownErrors[\"0xd92e233d\"] = \"Paused()\";\n                        knownErrors[\"0x08c379a0\"] = \"Error(string)\";\n                        if (knownErrors[errorSelector]) {\n                            // If it's ContractNotFound, that's our main suspect\n                            if (errorSelector === \"0xed592624\") {\n                                // Let's check the target contract bytecode size\n                                const targetCode = await this.provider.getCode(testTarget);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Contract analysis failed:\", error);\n        }\n    }\n    /**\n   * Identify which contract version is actually deployed\n   */ async identifyDeployedContract() {\n        try {\n            if (!this.provider || !this.signer) {\n                throw new Error(\"Not connected\");\n            }\n            // Test signature differences between V1 and original - calculate proper selectors\n            const tests = [\n                {\n                    name: \"Original KaiSign\",\n                    selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"createSpec(string)\").slice(0, 10),\n                    description: \"Has createSpec(string) function\"\n                },\n                {\n                    name: \"KaiSign V1\",\n                    selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"commitSpec(bytes32,address,uint256)\").slice(0, 10),\n                    description: \"Has commitSpec(bytes32,address,uint256) function\"\n                },\n                {\n                    name: \"V1 Pausable\",\n                    selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"paused()\").slice(0, 10),\n                    description: \"Has paused() function from Pausable\"\n                },\n                {\n                    name: \"V1 AccessControl\",\n                    selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"ADMIN_ROLE()\").slice(0, 10),\n                    description: \"Has ADMIN_ROLE constant from AccessControl\"\n                },\n                {\n                    name: \"Contract minBond\",\n                    selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"minBond()\").slice(0, 10),\n                    description: \"Has minBond() function\"\n                },\n                {\n                    name: \"Contract realityETH\",\n                    selector: ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"realityETH()\").slice(0, 10),\n                    description: \"Has realityETH() function\"\n                }\n            ];\n            tests.forEach((test)=>{});\n            const results = [];\n            for (const test of tests){\n                try {\n                    const result = await this.provider.call({\n                        to: RAW_CONTRACT_ADDRESS,\n                        data: test.selector\n                    });\n                    results.push(\"✅ \".concat(test.name, \": YES (\").concat(test.description, \")\"));\n                } catch (error) {\n                    if (error.data && error.data !== \"0x\") {\n                        results.push(\"⚠️ \".concat(test.name, \": EXISTS BUT REVERTS (\").concat(test.description, \")\"));\n                    } else {\n                        results.push(\"❌ \".concat(test.name, \": NO (\").concat(test.description, \")\"));\n                    }\n                }\n            }\n            // Determine which contract this is\n            const hasCommitSpec = results[1].includes(\"✅\") || results[1].includes(\"⚠️\");\n            const hasCreateSpec = results[0].includes(\"✅\") || results[0].includes(\"⚠️\");\n            const hasPaused = results[2].includes(\"✅\") || results[2].includes(\"⚠️\");\n            const hasMinBond = results[4].includes(\"✅\") || results[4].includes(\"⚠️\");\n            const hasRealityETH = results[5].includes(\"✅\") || results[5].includes(\"⚠️\");\n            if (hasCommitSpec && hasPaused) {} else if (hasCreateSpec && !hasCommitSpec && hasMinBond && hasRealityETH) {\n                // Store this information for later use\n                window.__KAISIGN_CONTRACT_TYPE = \"original\";\n            } else if (!hasCreateSpec && !hasCommitSpec) {} else {}\n            // Print summary\n            results.forEach((result)=>console.log(\"  \" + result));\n        } catch (error) {\n            console.error(\"Contract identification failed:\", error);\n        }\n    }\n    /**\n   * Test contract connectivity and basic functions\n   */ async testContract() {\n        try {\n            if (!this.contract || !this.signer) {\n                throw new Error(\"Not connected to MetaMask. Please connect first.\");\n            }\n            // Test 1: Check if contract exists\n            const contractCode = await this.provider.getCode(RAW_CONTRACT_ADDRESS);\n            if (contractCode === \"0x\") {\n                throw new Error(\"No contract deployed at this address\");\n            }\n            // Test 2: Get minimum bond\n            try {\n                const minBond = await this.contract.minBond();\n            } catch (error) {\n                console.error(\"✗ minBond() failed:\", error);\n                throw new Error(\"Contract exists but minBond() function failed - wrong ABI?\");\n            }\n            // Test 2b: Check if this looks like the V1 contract by checking constructor elements\n            try {\n                // Check for paused function (V1 specific)\n                const pausedResult = await this.provider.call({\n                    to: RAW_CONTRACT_ADDRESS,\n                    data: \"0x5c975abb\" // paused() selector\n                });\n                // Check for ADMIN_ROLE constant (V1 specific)\n                const adminRoleResult = await this.provider.call({\n                    to: RAW_CONTRACT_ADDRESS,\n                    data: \"0x75b238fc\" // ADMIN_ROLE() selector  \n                });\n                // Check for COMMIT_REVEAL_TIMEOUT constant\n                const timeoutResult = await this.provider.call({\n                    to: RAW_CONTRACT_ADDRESS,\n                    data: \"0x1234567890abcdef\" // This would be the selector for the constant\n                });\n            } catch (v1CheckError) {\n                console.warn(\"Could not verify V1 contract features:\", v1CheckError);\n            }\n            // Test 3: Get Reality.eth address\n            try {\n                // Skip Reality.eth address test\n                console.log(\"✓ Skipping Reality.eth address test\");\n            } catch (error) {\n                console.error(\"✗ realityETH() failed:\", error);\n            }\n            // Test 4: Check if you have necessary roles\n            try {\n                const userAddress = await this.signer.getAddress();\n                // Add hasRole function to ABI check\n                const hasAdminRole = await this.provider.call({\n                    to: RAW_CONTRACT_ADDRESS,\n                    data: ethers__WEBPACK_IMPORTED_MODULE_7__.concat([\n                        \"0x91d14854\",\n                        ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(\"0x0000000000000000000000000000000000000000000000000000000000000000\", 32),\n                        ethers__WEBPACK_IMPORTED_MODULE_7__.zeroPadValue(userAddress, 32)\n                    ])\n                });\n            } catch (roleError) {}\n            // Test 5: Check if commitSpec function exists (using the new 3-parameter signature)\n            try {\n                // Try to call the function selector directly\n                const commitSpecSelector = ethers__WEBPACK_IMPORTED_MODULE_6__.id(\"commitSpec(bytes32,address,uint256)\").slice(0, 10);\n                // Minimal calldata for 3 parameters: 3 * 32 bytes = 96 bytes of padding (192 hex chars)\n                const testCalldata = commitSpecSelector + \"0\".repeat(192);\n                const testCall = await this.provider.call({\n                    to: RAW_CONTRACT_ADDRESS,\n                    data: testCalldata\n                });\n            } catch (selectorError) {\n                console.error(\"✗ commitSpec function test failed:\", selectorError);\n                if (selectorError.data) {\n                    // Check if it's just a revert due to invalid parameters vs function not found\n                    if (selectorError.data === \"0x\" || selectorError.data === null) {\n                        console.error(\"⚠️  Function might not exist - no revert data returned\");\n                    } else {}\n                }\n            }\n            // Test 6: Try to call commitSpec with dry run using realistic commitment\n            try {\n                const testIpfs = \"QmTest123\";\n                const testNonce = BigInt(12345);\n                const testCommitment = ethers__WEBPACK_IMPORTED_MODULE_2__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPacked([\n                    \"string\",\n                    \"uint256\"\n                ], [\n                    testIpfs,\n                    testNonce\n                ]));\n                const testTarget1 = RAW_CONTRACT_ADDRESS;\n                // Note: commitSpec in V1 accepts only (bytes32 commitment, address targetContract, uint256 chainId).\n                // Do not define or pass a testIncentive parameter here.\n                const gasEstimate = await this.contract.commitSpec.estimateGas(testCommitment, testTarget1, 1, {\n                    value: await this.contract.minBond()\n                });\n            } catch (error) {\n                console.error(\"✗ commitSpec test failed:\", error);\n                console.error(\"This suggests the contract might be paused, have access control, or different function signature\");\n                // Try to decode the error\n                if (error.data) {}\n            }\n        } catch (error) {\n            console.error(\"Contract test failed:\", error);\n            throw error;\n        }\n    }\n    // =============================================================================\n    //                          KAISIGN V1 FUNCTIONS\n    // =============================================================================\n    async createIncentive(targetContract, targetChainId, amount, durationSeconds, description) {\n        if (!this.contract || !this.signer) {\n            throw new Error(\"Not connected to MetaMask. Please connect first.\");\n        }\n        try {\n            // Network check removed - let users connect on any network\n            console.log(\"💰 Parameters:\", {\n                targetContract,\n                targetChainId,\n                token,\n                amount,\n                durationSeconds,\n                description\n            });\n            // ETH only - value is the amount\n            // Check if contract has the createIncentive function\n            if (typeof this.contract.createIncentive !== 'function') {\n                throw new Error(\"Contract does not have createIncentive function\");\n            }\n            const tx = await this.contract.createIncentive(targetContract, targetChainId, amount, durationSeconds, description, {\n                value: amount\n            });\n            const receipt = await tx.wait();\n            // Log any events emitted\n            if (receipt.logs && receipt.logs.length > 0) {\n                receipt.logs.forEach((log, index)=>{});\n            }\n            return tx.hash;\n        } catch (error) {\n            var _this_contract, _this_signer, _error_message;\n            console.error(\"💥 Error creating incentive:\", error);\n            console.error(\"🔧 Contract address:\", (_this_contract = this.contract) === null || _this_contract === void 0 ? void 0 : _this_contract.target);\n            console.error(\"👤 Signer address:\", await ((_this_signer = this.signer) === null || _this_signer === void 0 ? void 0 : _this_signer.getAddress()));\n            if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {\n                throw new Error(\"Transaction would fail - check your parameters and account balance\");\n            }\n            if (error.code === 'INSUFFICIENT_FUNDS') {\n                throw new Error(\"Insufficient ETH balance to complete transaction\");\n            }\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('user rejected')) {\n                throw new Error(\"Transaction was rejected by user\");\n            }\n            throw error;\n        }\n    }\n    async getUserIncentives(userAddress) {\n        // Auto-connect if not connected\n        if (!this.contract) {\n            try {\n                console.log(\"Contract not connected, attempting to connect...\");\n                await this.connect();\n            } catch (connectError) {\n                console.warn(\"Failed to auto-connect for getUserIncentives:\", connectError);\n                // Return empty array instead of throwing to prevent blocking the UI\n                return [];\n            }\n        }\n        // Double check after connection attempt\n        if (!this.contract) {\n            console.warn(\"Contract still not available after connection attempt, returning empty array\");\n            return [];\n        }\n        try {\n            const incentiveIds = await this.contract.getUserIncentives(userAddress);\n            // Convert from ethers result to string array\n            const ids = Array.from(incentiveIds);\n            return ids;\n        } catch (error) {\n            var _this_contract, _error_info;\n            console.error(\"💥 Error getting user incentives:\", error);\n            console.error(\"🔧 Contract address:\", (_this_contract = this.contract) === null || _this_contract === void 0 ? void 0 : _this_contract.target);\n            console.error(\"📝 Function signature: getUserIncentives(address)\");\n            // If function doesn't exist or returns empty data, return empty array instead of throwing\n            if (error.code === \"BAD_DATA\" || ((_error_info = error.info) === null || _error_info === void 0 ? void 0 : _error_info.method) === \"getUserIncentives\") {\n                console.warn(\"⚠️ getUserIncentives function may not exist on this contract, returning empty array\");\n                return [];\n            }\n            // For other errors, also return empty array to prevent UI blocking\n            console.warn(\"⚠️ getUserIncentives failed, returning empty array to prevent UI blocking\");\n            return [];\n        }\n    }\n    async getIncentiveData(incentiveId) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            const incentive = await this.contract.incentives(incentiveId);\n            // Handle the struct response properly\n            const result = {\n                creator: incentive[0],\n                token: incentive[1],\n                amount: incentive[2].toString(),\n                deadline: Number(incentive[3]),\n                createdAt: Number(incentive[4]),\n                targetContract: incentive[5],\n                isClaimed: incentive[6],\n                isActive: incentive[7],\n                reserved: Number(incentive[8]),\n                chainId: Number(incentive[9]),\n                description: incentive[10] // string description\n            };\n            return result;\n        } catch (error) {\n            console.error(\"💥 Error getting incentive data:\", error);\n            console.error(\"🔍 Incentive ID:\", incentiveId);\n            throw error;\n        }\n    }\n    async getSpecsByContractPaginated(targetContract, offset, limit) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            const result = await this.contract.getSpecsByContractPaginated(targetContract, offset, limit);\n            return {\n                specIds: result.specIds,\n                total: Number(result.total)\n            };\n        } catch (error) {\n            console.error(\"Error getting paginated specs:\", error);\n            throw error;\n        }\n    }\n    async getSpecData(specId) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            // Call the specs function and handle potential structure variations\n            const spec = await this.contract.specs(specId);\n            // The contract might have different struct layouts, so we need to handle both cases\n            // Try to parse assuming the newer format with 'reserved' field\n            let parsedSpec;\n            if (Array.isArray(spec) && spec.length >= 11) {\n                // Handle tuple/array format - Updated to match exact contract struct order\n                parsedSpec = {\n                    createdTimestamp: Number(spec[0]),\n                    proposedTimestamp: Number(spec[1]),\n                    status: Number(spec[2]),\n                    totalBonds: spec[3].toString(),\n                    reserved: Number(spec[4]),\n                    creator: spec[5],\n                    targetContract: spec[6],\n                    blobHash: spec[7],\n                    questionId: spec[8],\n                    incentiveId: spec[9],\n                    chainId: Number(spec[10]) // uint256 chainId\n                };\n            } else {\n                // Handle named struct format\n                parsedSpec = {\n                    createdTimestamp: Number(spec.createdTimestamp || 0),\n                    proposedTimestamp: Number(spec.proposedTimestamp || 0),\n                    status: Number(spec.status || 0),\n                    totalBonds: (spec.totalBonds || 0).toString(),\n                    reserved: Number(spec.reserved || 0),\n                    creator: spec.creator || \"0x0000000000000000000000000000000000000000\",\n                    targetContract: spec.targetContract || \"0x0000000000000000000000000000000000000000\",\n                    blobHash: spec.blobHash || \"0x\",\n                    questionId: spec.questionId || \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n                    incentiveId: spec.incentiveId || \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n                    chainId: Number(spec.chainId || 0)\n                };\n            }\n            return parsedSpec;\n        } catch (error) {\n            var _error_message;\n            console.error(\"💥 Error getting spec data:\", error);\n            console.error(\"📋 SpecId that failed:\", specId);\n            // Try to provide more helpful error information\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"could not decode result data\")) {\n                console.error(\"🔧 This looks like an ABI mismatch. The contract struct might have changed.\");\n                // Try to extract some basic info from the raw error if possible\n                if (error.value) {\n                    console.error(\"📊 Raw contract return value:\", error.value);\n                }\n            }\n            throw new Error(\"Failed to decode specification data. This might be due to a contract version mismatch. Original error: \".concat(error.message));\n        }\n    }\n    async getCommitment(commitmentId) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            var _c__toString, _c_;\n            const c = await this.contract.commitments(commitmentId);\n            if (!c) return null;\n            var _c__toString1;\n            return {\n                committer: c[0],\n                commitTimestamp: Number(c[1]),\n                reserved1: Number(c[2]),\n                targetContract: c[3],\n                isRevealed: Boolean(c[4]),\n                bondAmount: (_c__toString1 = (_c_ = c[5]) === null || _c_ === void 0 ? void 0 : (_c__toString = _c_.toString) === null || _c__toString === void 0 ? void 0 : _c__toString.call(_c_)) !== null && _c__toString1 !== void 0 ? _c__toString1 : \"0\",\n                reserved: Number(c[6]),\n                revealDeadline: Number(c[7]),\n                chainId: Number(c[8]),\n                incentiveId: c[9]\n            };\n        } catch (err) {\n            console.error(\"Error reading commitment:\", err);\n            return null;\n        }\n    }\n    async proposeSpec(specId, bondAmount) {\n        if (!this.contract || !this.signer) {\n            throw new Error(\"Not connected to MetaMask. Please connect first.\");\n        }\n        try {\n            // Network check removed - let users connect on any network\n            const tx = await this.contract.proposeSpec(specId, {\n                value: bondAmount\n            });\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error proposing spec:\", error);\n            throw error;\n        }\n    }\n    async assertSpecValid(specId, bondAmount) {\n        if (!this.contract || !this.signer) {\n            throw new Error(\"Not connected to MetaMask. Please connect first.\");\n        }\n        try {\n            // Network check removed - let users connect on any network\n            const tx = await this.contract.assertSpecValid(specId, {\n                value: bondAmount\n            });\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error asserting spec valid:\", error);\n            throw error;\n        }\n    }\n    async assertSpecInvalid(specId, bondAmount) {\n        if (!this.contract || !this.signer) {\n            throw new Error(\"Not connected to MetaMask. Please connect first.\");\n        }\n        try {\n            // Network check removed - let users connect on any network\n            const tx = await this.contract.assertSpecInvalid(specId, {\n                value: bondAmount\n            });\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error asserting spec invalid:\", error);\n            throw error;\n        }\n    }\n    async handleResult(specId) {\n        if (!this.contract || !this.signer) {\n            throw new Error(\"Not connected to MetaMask. Please connect first.\");\n        }\n        try {\n            // First check the current status of the spec\n            const specData = await this.contract.specs(specId);\n            // Status: 0=Committed, 1=Submitted, 2=Proposed, 3=Finalized, 4=Cancelled\n            if (Number(specData.status) === 3) {\n                // Spec is already finalized, but incentives might not be claimed\n                // Let's try to claim ETH incentives manually if they exist\n                // Check if there are available ETH incentives for this spec's target contract\n                const availableIncentives = await this.getAvailableIncentives(specData.targetContract, Number(specData.chainId));\n                const ethIncentives = availableIncentives.filter((inc)=>inc.token === \"0x0000000000000000000000000000000000000000\" && !inc.isClaimed && inc.isActive);\n                if (ethIncentives.length > 0) {\n                    // There are unclaimed ETH incentives - the spec might have been finalized without processing incentives\n                    // This could happen if handleResult was never called or failed partially\n                    // Try calling handleResult anyway - it might work if the Reality.eth question needs processing\n                    try {\n                        const tx = await this.contract.handleResult(specId);\n                        const receipt = await tx.wait();\n                        return tx.hash;\n                    } catch (handleError) {\n                        throw new Error(\"Specification is finalized but incentives weren't claimed automatically. This may require contract admin intervention or the incentives may have expired.\");\n                    }\n                } else {\n                    throw new Error(\"Specification is already finalized and no unclaimed ETH incentives found. Check if incentives were already claimed or use claimActiveTokenIncentive for ERC20 tokens.\");\n                }\n            } else if (Number(specData.status) !== 2) {\n                throw new Error(\"Cannot handle result for spec in status \".concat(specData.status, \". Spec must be Proposed (status 2).\"));\n            }\n            const tx = await this.contract.handleResult(specId);\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error handling result:\", error);\n            // Decode specific contract errors\n            if (error.data === \"0xf2a87d5e\") {\n                throw new Error(\"NotProposed: Specification is not in Proposed status. It may already be finalized.\");\n            } else if (error.data === \"0x1bee0d5a\") {\n                throw new Error(\"NotFinalized: Reality.eth question is not yet finalized. Wait for the timeout period.\");\n            }\n            throw error;\n        }\n    }\n    async settleBonds(specId) {\n        if (!this.contract || !this.signer) {\n            throw new Error(\"Not connected to MetaMask. Please connect first.\");\n        }\n        try {\n            // Check spec status first\n            const specData = await this.contract.specs(specId);\n            // Validate requirements before attempting settlement\n            if (Number(specData.status) !== 3) {\n                throw new Error(\"Cannot settle bonds: Specification must be finalized (status 3), but current status is \".concat(Number(specData.status)));\n            }\n            if (specData.bondsSettled) {\n                throw new Error(\"Cannot settle bonds: Bonds have already been settled for this specification\");\n            }\n            // Check Reality.eth question status\n            const questionId = specData.questionId;\n            // IMPORTANT: Double-check by calling the contract's bondsSettled mapping directly\n            // This might be different from the spec struct value\n            try {\n                // The contract might have a bondsSettled mapping that's separate from the struct\n                // Let me try a different approach - check the ABI for available view functions\n                // Check if the contract has any other state we need to verify\n                // CRITICAL: Check the bondsSettled mapping directly\n                const mappingSettled = await this.contract.bondsSettled(specId);\n                if (mappingSettled) {\n                    throw new Error(\"Cannot settle bonds: The bondsSettled mapping shows bonds are already settled, even though the spec struct says false. This indicates the bonds were already processed.\");\n                }\n            } catch (stateError) {\n                console.error(\"Error checking additional state:\", stateError);\n            }\n            if (questionId === \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n                throw new Error(\"Cannot settle bonds: No Reality.eth question associated with this specification\");\n            }\n            // Try to get Reality.eth contract and check if question is finalized\n            try {\n                // Skip Reality.eth contract initialization for now\n                console.log(\"✓ Skipping Reality.eth contract initialization\");\n                // Create Reality.eth contract instance\n                const realityEthAbi = [\n                    \"function isFinalized(bytes32 question_id) external view returns (bool)\",\n                    \"function resultFor(bytes32 question_id) external view returns (bytes32)\"\n                ];\n                const realityEthContract = new ethers__WEBPACK_IMPORTED_MODULE_1__.Contract(realityEthAddress, realityEthAbi, this.provider);\n                const isFinalized = await realityEthContract.isFinalized(questionId);\n                if (isFinalized) {\n                    const result = await realityEthContract.resultFor(questionId);\n                } else {}\n            } catch (realityError) {\n                console.error(\"Error checking Reality.eth status:\", realityError);\n            }\n            // Check if contract has enough balance to pay out bonds (always run this)\n            try {\n                const kaisignContractAddress = \"0x4dFEA0C2B472a14cD052a8f9DF9f19fa5CF03719\";\n                const contractBalance = await this.provider.getBalance(kaisignContractAddress);\n                if (contractBalance < specData.totalBonds) {\n                    throw new Error(\"\\uD83D\\uDEA8 CONTRACT INSUFFICIENT FUNDS: Contract balance: \".concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(contractBalance), \" ETH, Required: \").concat(ethers__WEBPACK_IMPORTED_MODULE_9__.formatEther(specData.totalBonds), \" ETH\"));\n                }\n            } catch (balanceError) {\n                console.error(\"Error checking contract balance:\", balanceError);\n                throw balanceError;\n            }\n            // Try with manual gas estimation to avoid estimation errors\n            try {\n                const gasEstimate = await this.contract.settleBonds.estimateGas(specId);\n                const tx = await this.contract.settleBonds(specId, {\n                    gasLimit: gasEstimate + BigInt(50000) // Add buffer\n                });\n                const receipt = await tx.wait();\n                return tx.hash;\n            } catch (gasError) {\n                console.error(\"Gas estimation failed, trying with fixed gas:\", gasError);\n                // Try with a fixed gas limit\n                const tx = await this.contract.settleBonds(specId, {\n                    gasLimit: BigInt(200000) // Fixed gas limit\n                });\n                const receipt = await tx.wait();\n                return tx.hash;\n            }\n        } catch (error) {\n            console.error(\"Error settling bonds:\", error);\n            // Decode specific contract errors for settleBonds\n            if (error.data === \"0x1bee0d5a\") {\n                throw new Error(\"NotFinalized: Specification must be finalized before settling bonds.\");\n            } else if (error.data === \"0x2cb15938\") {\n                throw new Error(\"AlreadySettled: Bonds for this specification have already been settled.\");\n            }\n            // Check if it's a generic revert\n            if (error.message.includes(\"execution reverted\") && !error.data) {\n                // Try to get more info about why it failed\n                throw new Error(\"Bond settlement failed. This could be because: 1) Specification is not finalized, 2) Bonds already settled, 3) You're not authorized to settle, or 4) Contract state issue. Spec ID: \".concat(specId));\n            }\n            throw error;\n        }\n    }\n    async getCurrentAccount() {\n        if (!this.provider) {\n            return null;\n        }\n        try {\n            var _accounts_;\n            const accounts = await this.provider.listAccounts();\n            return accounts.length > 0 ? ((_accounts_ = accounts[0]) === null || _accounts_ === void 0 ? void 0 : _accounts_.address) || null : null;\n        } catch (error) {\n            console.error(\"Error getting current account:\", error);\n            return null;\n        }\n    }\n    async getContractSpecCount(targetContract) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            const count = await this.contract.getContractSpecCount(targetContract);\n            return Number(count);\n        } catch (error) {\n            console.error(\"Error getting contract spec count:\", error);\n            throw error;\n        }\n    }\n    async getAvailableIncentives(targetContract, targetChainId) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            const incentives = [];\n            // Get real incentives from contract events\n            try {\n                const filter = this.contract.filters.LogIncentiveCreated(null, null, targetContract);\n                const events = await this.contract.queryFilter(filter, -10000); // Last 10k blocks\n                for (const event of events){\n                    var _event_args;\n                    const incentiveId = (_event_args = event.args) === null || _event_args === void 0 ? void 0 : _event_args.incentiveId;\n                    if (incentiveId) {\n                        const incentiveData = await this.contract.incentives(incentiveId);\n                        // Only include incentives that exactly match the target chain ID\n                        // This prevents cross-chain incentive confusion\n                        if (incentiveData.isActive && !incentiveData.isClaimed && (targetChainId === undefined || incentiveData.chainId.toString() === targetChainId.toString())) {\n                            incentives.push({\n                                id: incentiveId,\n                                creator: incentiveData.creator,\n                                token: incentiveData.token,\n                                amount: incentiveData.token === \"0x0000000000000000000000000000000000000000\" ? (Number(incentiveData.amount) / 1e18).toString() : incentiveData.amount.toString(),\n                                deadline: Number(incentiveData.deadline),\n                                description: incentiveData.description,\n                                isActive: incentiveData.isActive,\n                                isClaimed: incentiveData.isClaimed\n                            });\n                        }\n                    }\n                }\n            } catch (eventError) {}\n            return incentives;\n        } catch (error) {\n            console.error(\"Error getting available incentives:\", error);\n            throw error;\n        }\n    }\n    async getIncentivesByTargetContract(targetContract) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            // This would require event filtering or a subgraph\n            // For now, returning empty array as placeholder\n            console.warn(\"getIncentivesByTargetContract: This function needs event filtering implementation\");\n            return [];\n        } catch (error) {\n            console.error(\"Error getting incentives by target contract:\", error);\n            throw error;\n        }\n    }\n    async claimActiveTokenIncentive(specId, tokenAddress) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            const tx = await this.contract.claimActiveTokenIncentive(specId, tokenAddress);\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error claiming active token incentive:\", error);\n            throw error;\n        }\n    }\n    // Helper function to claim ETH incentives manually\n    async claimETHIncentive(specId) {\n        if (!this.contract) {\n            throw new Error(\"Not connected to contract.\");\n        }\n        try {\n            // ETH token address is 0x0000000000000000000000000000000000000000\n            const ethAddress = \"0x0000000000000000000000000000000000000000\";\n            const tx = await this.contract.claimActiveTokenIncentive(specId, ethAddress);\n            const receipt = await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Error claiming ETH incentive:\", error);\n            // If claimActiveTokenIncentive fails for ETH, try handleResult as fallback\n            if (error.data === \"0x2b4fa360\") {\n                return await this.handleResult(specId);\n            }\n            throw error;\n        }\n    }\n    constructor(){\n        this.provider = null;\n        this.signer = null;\n        this.contract = null;\n        this.realityEthContract = null;\n    }\n}\n// Export a singleton instance\nconst web3Service = new Web3Service();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/web3Service.ts\n"));

/***/ })

});