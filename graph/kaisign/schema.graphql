type Contract @entity(immutable: false) {
  id: ID!                           # contract address + chainID
  address: Bytes!
  chainID: String!
  name: String!                     # from ERC7730 metadata
  version: String!                  # from ERC7730 metadata  
  description: String
  hasApprovedMetadata: Boolean!
  
  # Latest spec tracking for disputes/replacements
  latestApprovedSpecID: String!     # ID of most recent approved spec
  latestSpecTimestamp: BigInt!      # timestamp of latest spec
  
  functionCount: Int!
  functions: [Function!]! @derivedFrom(field: "contract")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Function @entity(immutable: false) {
  id: ID!                    # contract-chainID-selector
  contract: Contract!
  selector: String!          # 0xa9059cbb
  chainID: String!
  name: String!              # "transfer"
  intent: String!            # "Transfer {{amount}} to {{to}}"
  displayFormat: String!     # "transfer" 
  parameterTypes: [String!]! # ["address", "uint256"]
  createdAt: BigInt!
}

type Spec @entity(immutable: false) {
  id: Bytes!
  targetContract: Bytes!            # contract this spec is for
  user: Bytes!                      # creator address
  ipfs: String!                     # IPFS CID
  questionId: Bytes                 # RealityETH question ID
  chainID: String                   # extracted from IPFS metadata
  status: SpecStatus!
  blockTimestamp: BigInt!
  proposedTimestamp: BigInt
  isFinalized: Boolean
  isAccepted: Boolean
}

enum SpecStatus {
  COMMITTED
  SUBMITTED
  PROPOSED  
  FINALIZED
  CANCELLED
}

type LogAssertSpecInvalid @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  specID: Bytes! # bytes32
  questionId: Bytes! # bytes32
  bond: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogAssertSpecValid @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  specID: Bytes! # bytes32
  questionId: Bytes! # bytes32
  bond: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogCreateSpec @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  specID: Bytes! # bytes32
  ipfs: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogHandleResult @entity(immutable: true) {
  id: Bytes!
  specID: Bytes! # bytes32
  isAccepted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogProposeSpec @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  specID: Bytes! # bytes32
  questionId: Bytes! # bytes32
  bond: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
